/**
  ******************************************************************************
  * File Name          : main.c
  * Description        : Main program body
  ******************************************************************************
  *
  * COPYRIGHT(c) 2017 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "stm32f7xx_hal.h"

/* USER CODE BEGIN Includes */
#include <string.h>
#include "mat_lib.h"
#include "reg_constants.h"
/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

DAC_HandleTypeDef hdac;

TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/

/* --- Stringification macros --- */
// The following creates a string containing value of argument "a"
#define xstr(a) str(a)
// The following creates a string containing the name of argument "a"
#define str(a) #a
// For example:
// #define D 934
// str(D) will be replaced by "D"
// xstr(D) will be replaced by "934"
/* ------------------------------ */


#define ADC_SIZE 100
uint32_t adc_val_raw[ADC_SIZE*2] = {0};
uint32_t adc_val[2] = {0,0};
uint32_t adc_val_acc[2] = {0,0};
uint8_t led_index = 0;
uint8_t adc_reg = 0;
uint32_t sp = 2000;
int32_t control_val1 = 0;
int32_t control_val2 = 0;

#define KP 5
#define KK 2000

#define ALGORITHM "DMC1x1" // "StepResponse1x1" // "DMC1x1"
#define nu 1
#define ny 1
#define D 1000
float Ke[nu*ny] = {+9.029938e-01f};
float Ku[nu*(D-1)*nu] = {+2.033987e-01f,+2.184850e-01f,+2.275812e-01f,+2.323193e-01f,+2.339013e-01f,+2.332123e-01f,+2.309032e-01f,+2.274524e-01f,+2.232116e-01f,+2.184382e-01f,+2.133209e-01f,+2.079972e-01f,+2.025674e-01f,+1.971038e-01f,+1.916586e-01f,+1.862689e-01f,+1.809611e-01f,+1.757530e-01f,+1.706570e-01f,+1.656808e-01f,+1.608291e-01f,+1.561043e-01f,+1.515072e-01f,+1.470372e-01f,+1.426930e-01f,+1.384726e-01f,+1.343738e-01f,+1.303938e-01f,+1.265300e-01f,+1.227793e-01f,+1.191388e-01f,+1.156055e-01f,+1.121765e-01f,+1.088488e-01f,+1.056195e-01f,+1.024858e-01f,+9.944498e-02f,+9.649422e-02f,+9.363094e-02f,+9.085255e-02f,+8.815656e-02f,+8.554054e-02f,+8.300213e-02f,+8.053902e-02f,+7.814899e-02f,+7.582988e-02f,+7.357958e-02f,+7.139605e-02f,+6.927732e-02f,+6.722145e-02f,+6.522660e-02f,+6.329094e-02f,+6.141273e-02f,+5.959025e-02f,+5.782185e-02f,+5.610594e-02f,+5.444094e-02f,+5.282535e-02f,+5.125771e-02f,+4.973659e-02f,+4.826061e-02f,+4.682843e-02f,+4.543875e-02f,+4.409031e-02f,+4.278189e-02f,+4.151230e-02f,+4.028038e-02f,+3.908502e-02f,+3.792514e-02f,+3.679967e-02f,+3.570761e-02f,+3.464795e-02f,+3.361974e-02f,+3.262204e-02f,+3.165395e-02f,+3.071459e-02f,+2.980310e-02f,+2.891867e-02f,+2.806048e-02f,+2.722776e-02f,+2.641975e-02f,+2.563571e-02f,+2.487495e-02f,+2.413676e-02f,+2.342048e-02f,+2.272545e-02f,+2.205105e-02f,+2.139666e-02f,+2.076170e-02f,+2.014557e-02f,+1.954773e-02f,+1.896763e-02f,+1.840475e-02f,+1.785857e-02f,+1.732860e-02f,+1.681436e-02f,+1.631537e-02f,+1.583120e-02f,+1.536139e-02f,+1.490553e-02f,+1.446320e-02f,+1.403399e-02f,+1.361752e-02f,+1.321341e-02f,+1.282130e-02f,+1.244082e-02f,+1.207163e-02f,+1.171340e-02f,+1.136581e-02f,+1.102853e-02f,+1.070126e-02f,+1.038370e-02f,+1.007557e-02f,+9.776581e-03f,+9.486467e-03f,+9.204963e-03f,+8.931813e-03f,+8.666768e-03f,+8.409587e-03f,+8.160036e-03f,+7.917887e-03f,+7.682921e-03f,+7.454921e-03f,+7.233682e-03f,+7.019000e-03f,+6.810679e-03f,+6.608529e-03f,+6.412366e-03f,+6.222010e-03f,+6.037287e-03f,+5.858028e-03f,+5.684071e-03f,+5.515257e-03f,+5.351432e-03f,+5.192448e-03f,+5.038163e-03f,+4.888437e-03f,+4.743138e-03f,+4.602138e-03f,+4.465312e-03f,+4.332542e-03f,+4.203716e-03f,+4.078725e-03f,+3.957466e-03f,+3.839840e-03f,+3.725754e-03f,+3.615120e-03f,+3.507853e-03f,+3.403874e-03f,+3.303108e-03f,+3.205483e-03f,+3.110931e-03f,+3.019386e-03f,+2.930784e-03f,+2.845064e-03f,+2.762163e-03f,+2.682017e-03f,+2.604562e-03f,+2.529727e-03f,+2.457438e-03f,+2.387613e-03f,+2.320160e-03f,+2.254977e-03f,+2.191948e-03f,+2.130942e-03f,+2.071810e-03f,+2.014383e-03f,+1.958472e-03f,+1.903862e-03f,+1.850318e-03f,+1.797574e-03f,+1.745345e-03f,+1.693317e-03f,+1.641155e-03f,+1.588505e-03f,+1.534995e-03f,+1.480244e-03f,+1.423869e-03f,+1.365492e-03f,+1.304752e-03f,+1.241316e-03f,+1.174899e-03f,+1.105273e-03f,+1.032288e-03f,+9.558889e-04f,+8.761357e-04f,+7.932165e-04f,+7.074630e-04f,+6.193571e-04f,+5.295308e-04f,+4.387511e-04f,+3.478874e-04f,+2.578506e-04f,+1.694956e-04f,+8.347139e-05f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f,+0.000000e+00f};
//#define PARAMETERS "" 
#define PARAMETERS xstr(D) 
//#define PARAMETERS xstr(na)","xstr(nb)


float umax  =  1.0f;
float umin  = -1.0f;

float u[nu][KK] = {0.0f};
float y[ny][KK] = {0.0f};
float z[ny][KK] = {0.0f};

float du[nu] = {0.0f};

int32_t k = 0;
int32_t ktmp = 0;

uint32_t time_measurement = 0;
uint32_t time_measurement_max = 0;
uint32_t time_measurement_min = 0xFFFFFFFF;

#define INITIALIZING 0
#define STARTING 1
#define RUNNING 2
#define STOPPING 3
#define STOPPED 4
#define ERROR 10
uint8_t experiment_state = INITIALIZING;

char text[200] = "Test\n\0";
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void Error_Handler(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_DAC_Init(void);
static void MX_ADC3_Init(void);
static void MX_TIM2_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_TIM5_Init(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
static void SendText(char * txt){
	while(HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX);
	if(HAL_UART_Transmit_IT(&huart1, (uint8_t*)txt, strlen(txt))!= HAL_OK) 
		Error_Handler();  
	while(HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
//	if(htim->Instance == TIM3){ // This part is commented because the real implementation is in the IRQ.
//	}

	if (htim->Instance == TIM2) {
		static int i = 0;
    static int p = 0;
    static int m = 0;
    static int n = 0;
    static float Ydiff[ny]= {0.0f};
    static float dUp[nu*(D-1)]= {0.0f};
    static float dutmp[nu] = {0.0f};
		if(k>=0)
			for(i=0;i<ny;++i) 
				y[i][k] = ((float)adc_val[i]-2047.5f)/2047.5f;
		if(k>=1){
			HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1,DAC_ALIGN_12B_R, u[0][k-1]*2047.5f+2047.5f);
			HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_2,DAC_ALIGN_12B_R, u[1][k-1]*2047.5f+2047.5f);
		} else {
			HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1,DAC_ALIGN_12B_R, 0.0f*2047.5f+2047.5f);
			HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_2,DAC_ALIGN_12B_R, 0.0f*2047.5f+2047.5f);
		}
		switch(experiment_state){
			case INITIALIZING:
				SendText("ALG='"ALGORITHM"';P=["PARAMETERS"];\n\0");
				k = -500;
				for(ktmp=0; ktmp<KK; ++ktmp){ // initialization of setpoint values
					if     (ktmp< 100) z[0][ktmp] =  .0f; 
					else if(ktmp< 500) z[0][ktmp] = -.1f; 
					else if(ktmp< 900) z[0][ktmp] =  .1f; 
					else if(ktmp<1300) z[0][ktmp] = -.3f;
					else if(ktmp<1700) z[0][ktmp] =  .2f; 
					else               z[0][ktmp] =  .0f; 
//																
//					if     (ktmp< 300) z[1][ktmp] = -.0f;
//					else if(ktmp< 700) z[1][ktmp] = -.1f;
//					else if(ktmp<1100) z[1][ktmp] = -.2f;
//					else if(ktmp<1500) z[1][ktmp] =  .1f;
//					else if(ktmp<1900) z[1][ktmp] = -.2f;
//					else               z[1][ktmp] =  .0f;
				}

				experiment_state = STARTING;
			
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
			
			case STARTING: // set default control_val1 and control_val2, do some initial measuring
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);					
				if(k >= KP) experiment_state = RUNNING;
				break;
			case RUNNING: // control loop from k=kp to k=kk
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
				htim5.Instance->CNT = 0; // reset timer counter
				
 //Pozyskiwanie odpowiedzi skokowej
//				if(k >= 500)
//					u[0][k] = 1.0f;
			
				for(m=0;m<ny;++m){
					Ydiff[m] = z[m][k]-y[m][k];
				}

				i=0;
				for(p=0;p<(D-1);++p){
					for(n=0;n<nu;++n){
						dUp[i] = 0.0;
						if(k >= p+1) dUp[i] += u[n][k-p-1];
						if(k >= p+2) dUp[i] -= u[n][k-p-2];
						++i;
					}
				}

				mat_mul(Ke,nu,ny, Ydiff,ny,1, du);
				mat_mul(Ku,nu,(D-1)*nu, dUp,(D-1)*nu,1, dutmp);

				for(n=0;n<nu;++n){
					u[n][k] = (du[n]-dutmp[n])+u[n][k-1];
					if(u[n][k] > 1.0f) u[n][k] = 1.0f;
					if(u[n][k] <-1.0f) u[n][k] =-1.0f;
				}
				
				time_measurement = htim5.Instance->CNT; // get timer counter
				time_measurement_max = time_measurement>time_measurement_max?time_measurement:time_measurement_max;
				time_measurement_min = time_measurement<time_measurement_min?time_measurement:time_measurement_min;			
			
				if(k >= KK-1) experiment_state = STOPPING;
				break;
			case STOPPING: // send results of the experiment to the PC
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
				sprintf(text, "tmin=%d;tmax=%d;\n",time_measurement_min,time_measurement_max);
				SendText(text);
				for(ktmp=0; ktmp<KK; ++ktmp){
					sprintf(text,"k=%5d;",ktmp+1);
					SendText(text);
					for(i=0;i<nu;++i){
						sprintf(text,"u(k,%d)=%+8.5f;",i+1,u[i][ktmp]);
						SendText(text);
					}
					for(i=0;i<ny;++i){
						sprintf(text,"y(k,%d)=%+8.5f;z(k,%d)=%+8.5f;\n",i+1,y[i][ktmp],i+1,z[i][ktmp]);
						SendText(text);
					}
				}
				SendText("ALG='';P=[];\n\0");
				experiment_state = STOPPED;
				break;
			case STOPPED: // send results of the experiment to the PC
				HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
				break;
			case ERROR: // send error message and hang in there
				HAL_GPIO_WritePin(LED4_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
				while(1);
		}
		if(++k>=KK) k = KK-1;
  }
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle)
{
	static int i=0; 
	static uint32_t tmpval[2] = {0,0};
	for(i=0,tmpval[0]=0,tmpval[1]=0;i<ADC_SIZE; ++i){
		tmpval[0] += adc_val_raw[2*i];
		tmpval[1] += adc_val_raw[2*i+1];
	}
	adc_val[0] = tmpval[0]/ADC_SIZE;
	adc_val[1] = tmpval[1]/ADC_SIZE;;
}
/* USER CODE END 0 */

int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_DAC_Init();
  MX_ADC3_Init();
  MX_TIM2_Init();
  MX_USART1_UART_Init();
  MX_TIM5_Init();

  /* USER CODE BEGIN 2 */
	HAL_ADC_Start(&hadc3);
	if(HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc_val_raw, ADC_SIZE*2) != HAL_OK) Error_Handler();
	
	HAL_Delay(100);
	
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1,DAC_ALIGN_12B_R, 2048);
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_2,DAC_ALIGN_12B_R, 2048);
	
	HAL_TIM_Base_Init(&htim5);     // Init timer
	HAL_TIM_Base_Start_IT(&htim5); // start timer interrupts
	
	HAL_TIM_Base_Init(&htim2);     // Init timer
	HAL_TIM_Base_Start_IT(&htim2); // start timer interrupts
	
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
		
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
		
//		HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1,DAC_ALIGN_12B_R, sin_vals[i]);
//		i=(i+1)%SIN_SIZE;
		
//		HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1,DAC_ALIGN_12B_R, i*4095);
//		i=(i+1)%2;
//		HAL_Delay(1);
		
		
//			HAL_Delay(1000);
//			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
//			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
//			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
//			HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
//			HAL_Delay(100); HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
//			HAL_Delay(100); HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
//			HAL_Delay(100); HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
//			HAL_Delay(100); HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
  }
  /* USER CODE END 3 */

}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
  {
    Error_Handler();
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 5, 0);
}

/* ADC3 init function */
static void MX_ADC3_Init(void)
{

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc3.Instance = ADC3;
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
  hadc3.Init.ScanConvMode = ENABLE;
  hadc3.Init.ContinuousConvMode = ENABLE;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.NbrOfConversion = 2;
  hadc3.Init.DMAContinuousRequests = ENABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
  {
    Error_Handler();
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = 2;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

}

/* DAC init function */
static void MX_DAC_Init(void)
{

  DAC_ChannelConfTypeDef sConfig;

    /**DAC Initialization 
    */
  hdac.Instance = DAC;
  if (HAL_DAC_Init(&hdac) != HAL_OK)
  {
    Error_Handler();
  }

    /**DAC channel OUT1 config 
    */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }

    /**DAC channel OUT2 config 
    */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }

}

/* TIM2 init function */
static void MX_TIM2_Init(void)
{

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 10*REG_PERIOD;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 10800;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_TIMING;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }

}

/* TIM5 init function */
static void MX_TIM5_Init(void)
{

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim5.Instance = TIM5;
  htim5.Init.Prescaler = 108;
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 0xffffffff;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_TIMING;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }

}

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }

}

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 4, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);

}

/** Configure pins as 
        * Analog 
        * Input 
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : CTR_Pin */
  GPIO_InitStruct.Pin = CTR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(CTR_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : UP_Pin RIGHT_Pin */
  GPIO_InitStruct.Pin = UP_Pin|RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /*Configure GPIO pins : LEFT_Pin DOWN_Pin */
  GPIO_InitStruct.Pin = LEFT_Pin|DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
  /* USER CODE END Error_Handler */ 
}

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}

#endif

/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
