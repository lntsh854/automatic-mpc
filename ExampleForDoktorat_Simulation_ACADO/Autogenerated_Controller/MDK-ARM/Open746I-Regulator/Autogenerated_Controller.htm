<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [Open746I-Regulator\Autogenerated_Controller.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image Open746I-Regulator\Autogenerated_Controller.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Sat Jun 02 19:10:14 2018
<BR><P>
<H3>Maximum Stack Usage =      12536 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; acado_feedbackStep &rArr; acado_solve &rArr; QProblemB::init(const double*, const double*, const double*, const double*, int&, const double*, double*) &rArr; QProblemB::solveInitialQP(const double*, const double*, const Bounds*, int&, double*) &rArr; QProblemB::hotstart(const double*, const double*, const double*, int&, double*) &rArr; QProblemB::hotstart_performStep(const int*, const int*, const double*, const double*, const double*, const double*, const double*, const double*, int, SubjectToStatus) &rArr; QProblemB::removeBound(int, BooleanType) &rArr; Bounds::moveFixedToFree(int) &rArr; SubjectTo::addIndex(Indexlist*, int, SubjectToStatus) &rArr; Indexlist::addNumber(int) &rArr; MessageHandling::throwWarning(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr; MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr;  MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[20]">CAN1_RX0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">CAN1_RX0_IRQHandler</a><BR>
 <LI><a href="#[f3]">MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f3]">MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[70]">ADC_DMAConvCplt</a> from stm32f7xx_hal_adc.o(i.ADC_DMAConvCplt) referenced from stm32f7xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[72]">ADC_DMAError</a> from stm32f7xx_hal_adc.o(i.ADC_DMAError) referenced from stm32f7xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[71]">ADC_DMAHalfConvCplt</a> from stm32f7xx_hal_adc.o(i.ADC_DMAHalfConvCplt) referenced from stm32f7xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[1e]">ADC_IRQHandler</a> from stm32f7xx_it.o(i.ADC_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6]">BusFault_Handler</a> from stm32f7xx_it.o(i.BusFault_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[20]">CAN1_RX0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[21]">CAN1_RX1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[22]">CAN1_SCE_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1f]">CAN1_TX_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4c]">CAN2_RX0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4d]">CAN2_RX1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4e]">CAN2_SCE_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4b]">CAN2_TX_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[69]">CEC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5a]">DCMI_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3b]">DMA1_Stream7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[65]">DMA2D_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream0_IRQHandler</a> from stm32f7xx_it.o(i.DMA2_Stream0_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[9]">DebugMon_Handler</a> from stm32f7xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[49]">ETH_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4a]">ETH_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[12]">EXTI0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[34]">EXTI15_10_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[13]">EXTI1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[14]">EXTI2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[15]">EXTI3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[16]">EXTI4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[23]">EXTI9_5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[10]">FLASH_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3c]">FMC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5c]">FPU_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from stm32f7xx_it.o(i.HardFault_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2c]">I2C1_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2b]">I2C1_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2e]">I2C2_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2d]">I2C2_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[55]">I2C3_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[54]">I2C3_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6b]">I2C4_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6a]">I2C4_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[68]">LPTIM1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[64]">LTDC_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[63]">LTDC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5]">MemManage_Handler</a> from stm32f7xx_it.o(i.MemManage_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from stm32f7xx_it.o(i.NMI_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4f]">OTG_FS_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[36]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[59]">OTG_HS_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[58]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[d]">PVD_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from stm32f7xx_it.o(i.PendSV_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[67]">QUADSPI_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[11]">RCC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5b]">RNG_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[35]">RTC_Alarm_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[f]">RTC_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[62]">SAI1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[66]">SAI2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3d]">SDMMC1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6c]">SPDIF_RX_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2f]">SPI1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[30]">SPI2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3f]">SPI3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5f]">SPI4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[60]">SPI5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[61]">SPI6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from stm32f7xx_it.o(i.SVC_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from stm32f7xx_it.o(i.SysTick_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6e]">SystemInit</a> from system_stm32f7xx.o(i.SystemInit) referenced from startup_stm32f746xx.o(.text)
 <LI><a href="#[e]">TAMP_STAMP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[24]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[27]">TIM1_CC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[26]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[25]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[28]">TIM2_IRQHandler</a> from stm32f7xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[29]">TIM3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2a]">TIM4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3e]">TIM5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[42]">TIM6_DAC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[43]">TIM7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[37]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3a]">TIM8_CC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[39]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[38]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[40]">UART4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[41]">UART5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5d]">UART7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5e]">UART8_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[73]">UART_DMAAbortOnError</a> from stm32f7xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f7xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[31]">USART1_IRQHandler</a> from stm32f7xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[32]">USART2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[33]">USART3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[53]">USART6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[7]">UsageFault_Handler</a> from stm32f7xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[c]">WWDG_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[76]">MessageHandling::~MessageHandling()</a> from messagehandling.o(i._ZN15MessageHandlingD1Ev) referenced from messagehandling.o(i.__sti___19_MessageHandling_cpp_402fe4a4)
 <LI><a href="#[74]">Bounds::~Bounds()</a> from bounds.o(i._ZN6BoundsD1Ev) referenced from qproblemb.o(i._ZN9QProblemB14solveInitialQPEPKdS1_PK6BoundsRiPd)
 <LI><a href="#[6f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f746xx.o(.text)
 <LI><a href="#[77]">__sti___19_MessageHandling_cpp_402fe4a4</a> from messagehandling.o(i.__sti___19_MessageHandling_cpp_402fe4a4) referenced from messagehandling.o(.init_array)
 <LI><a href="#[75]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[6d]">main</a> from main_mpc.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(.text)
</UL>
<P><STRONG><a name="[180]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[79]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[95]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[181]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[7b]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[182]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[183]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[184]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[7c]"></a>__rt_final_cpp$nonempty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __rt_final_cpp$nonempty &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[185]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[186]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_initializeSolver
</UL>

<P><STRONG><a name="[188]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[17f]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_string
</UL>

<P><STRONG><a name="[78]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::solveInitialQP(const double*, const double*, const Bounds*, int&, double*)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___19_MessageHandling_cpp_402fe4a4
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_solve_dim4_system_reuse
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_solve_dim4_system
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_rhs
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_integrate
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::obtainAuxiliaryWorkingSet(const double*, const double*, const Bounds*, Bounds*) const
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::areBoundsConsistent(const double*, const double*) const
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::computeGivens(double, double, double&, double&, double&, double&) const
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::applyGivens(double, double, double, double, double&, double&) const
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_determineStepDirection(const int*, const int*, const double*, const double*, const double*, BooleanType, double*, double*, double*)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupAuxiliaryQPbounds(BooleanType)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_performStep(const int*, const int*, const double*, const double*, const double*, const double*, const double*, const double*, int, SubjectToStatus)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_setBlockH11
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multQETGx
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multGxd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multGxGx
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multGxGu
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multEQDy
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multEDu
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_macETSlu
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_expand
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_condenseFdb
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_rhs
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_integrate
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::obtainAuxiliaryWorkingSet(const double*, const double*, const Bounds*, Bounds*) const
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::areBoundsConsistent(const double*, const double*) const
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart(const double*, const double*, const double*, int&, double*)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_determineStepLength(const int*, const int*, const double*, const double*, const double*, const double*, int&, SubjectToStatus&)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_determineDataShift(const int*, const double*, const double*, const double*, double*, double*, double*, BooleanType&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::checkForIdentityHessian()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupAuxiliaryQPbounds(BooleanType)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupSubjectToType()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::solveInitialQP(const double*, const double*, const Bounds*, int&, double*)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_modelSimulation
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_condensePrep
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_condenseFdb
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_solve_dim4_triangular
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupCholeskyDecomposition()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupAuxiliaryQPgradient()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::removeBound(int, BooleanType)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::backsolveR(const double*, BooleanType, BooleanType, double*)
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_solve_dim4_triangular
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_solve_dim4_system_reuse
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_solve_dim4_system
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_rhs
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_integrate
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::computeGivens(double, double, double&, double&, double&, double&) const
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::applyGivens(double, double, double, double, double&, double&) const
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_determineStepDirection(const int*, const int*, const double*, const double*, const double*, BooleanType, double*, double*, double*)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupCholeskyDecomposition()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupAuxiliaryQPgradient()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_performStep(const int*, const int*, const double*, const double*, const double*, const double*, const double*, const double*, int, SubjectToStatus)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::removeBound(int, BooleanType)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::backsolveR(const double*, BooleanType, BooleanType, double*)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_setBlockH11
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multRDy
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multQN1d
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multQN1Gu
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multQETGx
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multQDy
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multQ1d
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multQ1Gu
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multGxd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multGxGx
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multGxGu
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multEQDy
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multEDu
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_expand
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_condenseFdb
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_solve_dim4_triangular
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_solve_dim4_system
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::computeGivens(double, double, double&, double&, double&, double&) const
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_determineStepLength(const int*, const int*, const double*, const double*, const double*, const double*, int&, SubjectToStatus&)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupCholeskyDecomposition()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::backsolveR(const double*, BooleanType, BooleanType, double*)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_integrate
</UL>

<P><STRONG><a name="[16c]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measurements
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_setpoint
</UL>

<P><STRONG><a name="[189]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_integrate
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::obtainAuxiliaryWorkingSet(const double*, const double*, const Bounds*, Bounds*) const
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::areBoundsConsistent(const double*, const double*) const
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::computeGivens(double, double, double&, double&, double&, double&) const
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_determineStepLength(const int*, const int*, const double*, const double*, const double*, const double*, int&, SubjectToStatus&)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupSubjectToType()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAbs(double)
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_solve_dim4_system
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::obtainAuxiliaryWorkingSet(const double*, const double*, const Bounds*, Bounds*) const
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::computeGivens(double, double, double&, double&, double&, double&) const
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_determineStepLength(const int*, const int*, const double*, const double*, const double*, const double*, int&, SubjectToStatus&)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_determineDataShift(const int*, const double*, const double*, const double*, double*, double*, double*, BooleanType&)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupCholeskyDecomposition()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::checkForIdentityHessian()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_performStep(const int*, const int*, const double*, const double*, const double*, const double*, const double*, const double*, int, SubjectToStatus)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupSubjectToType()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::removeBound(int, BooleanType)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::backsolveR(const double*, BooleanType, BooleanType, double*)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controls
</UL>

<P><STRONG><a name="[18a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[18b]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[18c]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_dtor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[7d]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_final_cpp$nonempty
</UL>

<P><STRONG><a name="[8f]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[18e]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[87]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[93]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[18f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[190]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_final.o(.text), UNUSED)

<P><STRONG><a name="[1e]"></a>ADC_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_IRQHandler &rArr; HAL_ADC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.DMA2_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, low_lvl_main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_string
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency_write_string
</UL>

<P><STRONG><a name="[9b]"></a>HAL_ADCEx_InjectedConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_adc_ex.o(i.HAL_ADCEx_InjectedConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 414 bytes, Stack size 12 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
</UL>

<P><STRONG><a name="[96]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, low_lvl_main.o(i.HAL_ADC_ConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[98]"></a>HAL_ADC_ConvHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_ConvHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAHalfConvCplt
</UL>

<P><STRONG><a name="[97]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAError
</UL>

<P><STRONG><a name="[99]"></a>HAL_ADC_IRQHandler</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_LevelOutOfWindowCallback
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConvCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>HAL_ADC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
</UL>

<P><STRONG><a name="[9c]"></a>HAL_ADC_LevelOutOfWindowCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_LevelOutOfWindowCallback))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[178]"></a>HAL_ADC_Start</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ADC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[a5]"></a>HAL_ADC_Start_DMA</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[e3]"></a>HAL_DAC_ConfigChannel</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f7xx_hal_dac.o(i.HAL_DAC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DAC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
</UL>

<P><STRONG><a name="[a7]"></a>HAL_DAC_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f7xx_hal_dac.o(i.HAL_DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_DAC_Init &rArr; HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
</UL>

<P><STRONG><a name="[a8]"></a>HAL_DAC_MspInit</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_DAC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
</UL>

<P><STRONG><a name="[13d]"></a>HAL_DAC_SetValue</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32f7xx_hal_dac.o(i.HAL_DAC_SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DAC_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__setControlValue
</UL>

<P><STRONG><a name="[179]"></a>HAL_DAC_Start</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, stm32f7xx_hal_dac.o(i.HAL_DAC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_DAC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[d6]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 574 bytes, Stack size 24 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>HAL_DMA_Init</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[a6]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[ad]"></a>HAL_Delay</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32f7xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[a0]"></a>HAL_GPIO_Init</STRONG> (Thumb, 484 bytes, Stack size 24 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[e6]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[a9]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[eb]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ae]"></a>HAL_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f7xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[b0]"></a>HAL_InitTick</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f7xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b1]"></a>HAL_MspInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f7xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a4]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[a3]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[af]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[b5]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32f7xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b6]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 2322 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b7]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 420 bytes, Stack size 16 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ba]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[b9]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[bb]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[b8]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[bc]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1210 bytes, Stack size 16 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ed]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[be]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[b2]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f7xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[bd]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c7]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[bf]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[c0]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[17a]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[c3]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[c2]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 440 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>HAL_TIM_OC_ConfigChannel</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIM_OC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_OC_ConfigChannel &rArr; TIM_OC6_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC6_SetConfig
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC5_SetConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[c4]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d1]"></a>HAL_TIM_OC_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_OC_Init &rArr; HAL_TIM_OC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[d2]"></a>HAL_TIM_OC_MspInit</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f7xx_hal_msp.o(i.HAL_TIM_OC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_OC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[c5]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main_mpc.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[170]"></a>HAL_UART_GetState</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_string
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency_write_string
</UL>

<P><STRONG><a name="[d3]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>HAL_UART_Init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[db]"></a>HAL_UART_MspInit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[f0]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[171]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_string
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency_write_string
</UL>

<P><STRONG><a name="[ef]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HardFault_Handler &rArr; emergency_write_string &rArr; HAL_UART_Transmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency_write_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[ec]"></a>SystemClock_Config</STRONG> (Thumb, 208 bytes, Stack size 216 bytes, low_lvl_main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[6e]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_stm32f7xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>TIM2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[cb]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[cc]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[cd]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[ce]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[dd]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[de]"></a>UART_CheckIdleState</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[dc]"></a>UART_SetConfig</STRONG> (Thumb, 858 bytes, Stack size 32 bytes, stm32f7xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ee]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f7xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[31]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[119]"></a>getCPUtime()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, utils.o(i._Z10getCPUtimev))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart(const double*, const double*, const double*, int&, double*)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::solveInitialQP(const double*, const double*, const Bounds*, int&, double*)
</UL>

<P><STRONG><a name="[f9]"></a>getGlobalMessageHandler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, messagehandling.o(i._Z23getGlobalMessageHandlerv))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Indexlist::getNumberArray(int*) const
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::moveFreeToFixed(int, SubjectToStatus)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::moveFixedToFree(int)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::setupAllFree()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::setupBound(int, SubjectToStatus)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::obtainAuxiliaryWorkingSet(const double*, const double*, const Bounds*, Bounds*) const
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubjectTo::setType(int, SubjectToType)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::QProblemB(int)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart(const double*, const double*, const double*, int&, double*)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::addBound(int, SubjectToStatus, BooleanType)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::init(const double*, const double*, const double*, const double*, int&, const double*, double*)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_determineStepDirection(const int*, const int*, const double*, const double*, const double*, BooleanType, double*, double*, double*)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupCholeskyDecomposition()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupAuxiliaryWorkingSet(const Bounds*, BooleanType)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupAuxiliaryQPbounds(BooleanType)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_performStep(const int*, const int*, const double*, const double*, const double*, const double*, const double*, const double*, int, SubjectToStatus)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::solveInitialQP(const double*, const double*, const Bounds*, int&, double*)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupQPdata(const double*, const double*, const double*, const double*, const double*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::removeBound(int, BooleanType)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::backsolveR(const double*, BooleanType, BooleanType, double*)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Indexlist::addNumber(int)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubjectTo::addIndex(Indexlist*, int, SubjectToStatus)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubjectTo::removeIndex(Indexlist*, int)
</UL>

<P><STRONG><a name="[f1]"></a>getAbs(double)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, qproblemb.o(i._Z6getAbsd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getAbs(double)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::computeGivens(double, double, double&, double&, double&, double&) const
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_determineDataShift(const int*, const double*, const double*, const double*, double*, double*, double*, BooleanType&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::checkForIdentityHessian()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::backsolveR(const double*, BooleanType, BooleanType, double*)
</UL>

<P><STRONG><a name="[f3]"></a>MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, messagehandling.o(i._ZN15MessageHandling10throwErrorE11returnValuePKcS2_S2_m16VisibilityStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr;  MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwMessage(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Indexlist::getNumberArray(int*) const
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::moveFreeToFixed(int, SubjectToStatus)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::moveFixedToFree(int)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::setupAllFree()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::setupBound(int, SubjectToStatus)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwInfo(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::obtainAuxiliaryWorkingSet(const double*, const double*, const Bounds*, Bounds*) const
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubjectTo::setType(int, SubjectToType)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::QProblemB(int)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart(const double*, const double*, const double*, int&, double*)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::addBound(int, SubjectToStatus, BooleanType)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::init(const double*, const double*, const double*, const double*, int&, const double*, double*)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_determineStepDirection(const int*, const int*, const double*, const double*, const double*, BooleanType, double*, double*, double*)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupCholeskyDecomposition()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupAuxiliaryWorkingSet(const Bounds*, BooleanType)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupAuxiliaryQPbounds(BooleanType)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_performStep(const int*, const int*, const double*, const double*, const double*, const double*, const double*, const double*, int, SubjectToStatus)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::solveInitialQP(const double*, const double*, const Bounds*, int&, double*)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupQPdata(const double*, const double*, const double*, const double*, const double*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::removeBound(int, BooleanType)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::backsolveR(const double*, BooleanType, BooleanType, double*)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Indexlist::addNumber(int)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwWarning(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubjectTo::addIndex(Indexlist*, int, SubjectToStatus)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubjectTo::removeIndex(Indexlist*, int)
</UL>

<P><STRONG><a name="[f4]"></a>MessageHandling::throwMessage(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus, const char*)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, messagehandling.o(i._ZN15MessageHandling12throwMessageE11returnValuePKcS2_S2_m16VisibilityStatusS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MessageHandling::throwMessage(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwInfo(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwWarning(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
</UL>

<P><STRONG><a name="[f5]"></a>MessageHandling::throwWarning(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, messagehandling.o(i._ZN15MessageHandling12throwWarningE11returnValuePKcS2_S2_m16VisibilityStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MessageHandling::throwWarning(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr; MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr;  MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwMessage(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Indexlist::addNumber(int)
</UL>

<P><STRONG><a name="[135]"></a>MessageHandling::reset()</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, messagehandling.o(i._ZN15MessageHandling5resetEv))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::QProblemB(int)
</UL>

<P><STRONG><a name="[f6]"></a>MessageHandling::throwInfo(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, messagehandling.o(i._ZN15MessageHandling9throwInfoE11returnValuePKcS2_S2_m16VisibilityStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MessageHandling::throwInfo(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr; MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr;  MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwMessage(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart(const double*, const double*, const double*, int&, double*)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::solveInitialQP(const double*, const double*, const Bounds*, int&, double*)
</UL>

<P><STRONG><a name="[13e]"></a>MessageHandling::MessageHandling(int*, VisibilityStatus, VisibilityStatus, VisibilityStatus)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, messagehandling.o(i._ZN15MessageHandlingC1EPi16VisibilityStatusS1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MessageHandling::MessageHandling(int*, VisibilityStatus, VisibilityStatus, VisibilityStatus)
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___19_MessageHandling_cpp_402fe4a4
</UL>

<P><STRONG><a name="[192]"></a>MessageHandling::MessageHandling__sub_object(int*, VisibilityStatus, VisibilityStatus, VisibilityStatus)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, messagehandling.o(i._ZN15MessageHandlingC1EPi16VisibilityStatusS1_S1_), UNUSED)

<P><STRONG><a name="[76]"></a>MessageHandling::~MessageHandling()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, messagehandling.o(i._ZN15MessageHandlingD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> messagehandling.o(i.__sti___19_MessageHandling_cpp_402fe4a4)
</UL>
<P><STRONG><a name="[193]"></a>MessageHandling::~MessageHandling__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, messagehandling.o(i._ZN15MessageHandlingD1Ev), UNUSED)

<P><STRONG><a name="[f7]"></a>Bounds::setupBound(int, SubjectToStatus)</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, bounds.o(i._ZN6Bounds10setupBoundEi15SubjectToStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Bounds::setupBound(int, SubjectToStatus) &rArr; SubjectTo::addIndex(Indexlist*, int, SubjectToStatus) &rArr; Indexlist::addNumber(int) &rArr; MessageHandling::throwWarning(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr; MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr;  MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::getFree()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGlobalMessageHandler()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubjectTo::addIndex(Indexlist*, int, SubjectToStatus)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::getNV() const
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::getFixed()
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::setupAllFree()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::obtainAuxiliaryWorkingSet(const double*, const double*, const Bounds*, Bounds*) const
</UL>

<P><STRONG><a name="[fd]"></a>Bounds::setupAllFree()</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, bounds.o(i._ZN6Bounds12setupAllFreeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Bounds::setupAllFree() &rArr; Bounds::setupBound(int, SubjectToStatus) &rArr; SubjectTo::addIndex(Indexlist*, int, SubjectToStatus) &rArr; Indexlist::addNumber(int) &rArr; MessageHandling::throwWarning(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr; MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr;  MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::setupBound(int, SubjectToStatus)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubjectTo::getType(int) const
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGlobalMessageHandler()
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::solveInitialQP(const double*, const double*, const Bounds*, int&, double*)
</UL>

<P><STRONG><a name="[ff]"></a>Bounds::moveFixedToFree(int)</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, bounds.o(i._ZN6Bounds15moveFixedToFreeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Bounds::moveFixedToFree(int) &rArr; SubjectTo::addIndex(Indexlist*, int, SubjectToStatus) &rArr; Indexlist::addNumber(int) &rArr; MessageHandling::throwWarning(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr; MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr;  MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::getFree()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGlobalMessageHandler()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubjectTo::addIndex(Indexlist*, int, SubjectToStatus)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubjectTo::removeIndex(Indexlist*, int)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::getNV() const
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::getFixed()
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::removeBound(int, BooleanType)
</UL>

<P><STRONG><a name="[101]"></a>Bounds::moveFreeToFixed(int, SubjectToStatus)</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, bounds.o(i._ZN6Bounds15moveFreeToFixedEi15SubjectToStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Bounds::moveFreeToFixed(int, SubjectToStatus) &rArr; SubjectTo::addIndex(Indexlist*, int, SubjectToStatus) &rArr; Indexlist::addNumber(int) &rArr; MessageHandling::throwWarning(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr; MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr;  MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::getFree()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGlobalMessageHandler()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubjectTo::addIndex(Indexlist*, int, SubjectToStatus)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubjectTo::removeIndex(Indexlist*, int)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::getNV() const
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::getFixed()
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::addBound(int, SubjectToStatus, BooleanType)
</UL>

<P><STRONG><a name="[102]"></a>Bounds::init(int)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bounds.o(i._ZN6Bounds4initEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Bounds::init(int) &rArr; SubjectTo::init(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubjectTo::init(int)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Indexlist::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::QProblemB(int)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::solveInitialQP(const double*, const double*, const Bounds*, int&, double*)
</UL>

<P><STRONG><a name="[fa]"></a>Bounds::getFree()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, qproblemb.o(i._ZN6Bounds7getFreeEv))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::moveFreeToFixed(int, SubjectToStatus)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::moveFixedToFree(int)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::setupBound(int, SubjectToStatus)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart(const double*, const double*, const double*, int&, double*)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::addBound(int, SubjectToStatus, BooleanType)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getNZ()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupCholeskyDecomposition()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::removeBound(int, BooleanType)
</UL>

<P><STRONG><a name="[fc]"></a>Bounds::getFixed()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bounds.o(i._ZN6Bounds8getFixedEv))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::moveFreeToFixed(int, SubjectToStatus)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::moveFixedToFree(int)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::setupBound(int, SubjectToStatus)
</UL>

<P><STRONG><a name="[105]"></a>Bounds::Bounds()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bounds.o(i._ZN6BoundsC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bounds::Bounds()
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubjectTo::SubjectTo()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Indexlist::Indexlist()
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::QProblemB(int)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::solveInitialQP(const double*, const double*, const Bounds*, int&, double*)
</UL>

<P><STRONG><a name="[194]"></a>Bounds::Bounds__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bounds.o(i._ZN6BoundsC1Ev), UNUSED)

<P><STRONG><a name="[74]"></a>Bounds::~Bounds()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bounds.o(i._ZN6BoundsD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bounds::~Bounds()
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubjectTo::~SubjectTo()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Indexlist::~Indexlist()
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::~QProblemB()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qproblemb.o(i._ZN9QProblemB14solveInitialQPEPKdS1_PK6BoundsRiPd)
</UL>
<P><STRONG><a name="[195]"></a>Bounds::~Bounds__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bounds.o(i._ZN6BoundsD1Ev), UNUSED)

<P><STRONG><a name="[10a]"></a>Indexlist::removeNumber(int)</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, indexlist.o(i._ZN9Indexlist12removeNumberEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Indexlist::removeNumber(int) &rArr; Indexlist::getPhysicalIndex(int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Indexlist::getPhysicalIndex(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubjectTo::removeIndex(Indexlist*, int)
</UL>

<P><STRONG><a name="[103]"></a>Indexlist::init()</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, indexlist.o(i._ZN9Indexlist4initEv))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::init(int)
</UL>

<P><STRONG><a name="[10c]"></a>Indexlist::addNumber(int)</STRONG> (Thumb, 378 bytes, Stack size 112 bytes, indexlist.o(i._ZN9Indexlist9addNumberEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Indexlist::addNumber(int) &rArr; MessageHandling::throwWarning(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr; MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr;  MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Indexlist::getNumberArray(int*) const
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwWarning(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGlobalMessageHandler()
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubjectTo::addIndex(Indexlist*, int, SubjectToStatus)
</UL>

<P><STRONG><a name="[107]"></a>Indexlist::Indexlist()</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, indexlist.o(i._ZN9IndexlistC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::Bounds()
</UL>

<P><STRONG><a name="[196]"></a>Indexlist::Indexlist__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indexlist.o(i._ZN9IndexlistC1Ev), UNUSED)

<P><STRONG><a name="[108]"></a>Indexlist::~Indexlist()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, indexlist.o(i._ZN9IndexlistD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::~Bounds()
</UL>

<P><STRONG><a name="[197]"></a>Indexlist::~Indexlist__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indexlist.o(i._ZN9IndexlistD1Ev), UNUSED)

<P><STRONG><a name="[10e]"></a>QProblemB::backsolveR(const double*, BooleanType, double*)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, qproblemb.o(i._ZN9QProblemB10backsolveREPKd11BooleanTypePd))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = QProblemB::backsolveR(const double*, BooleanType, double*) &rArr; QProblemB::backsolveR(const double*, BooleanType, BooleanType, double*) &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::backsolveR(const double*, BooleanType, BooleanType, double*)
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_determineStepDirection(const int*, const int*, const double*, const double*, const double*, BooleanType, double*, double*, double*)
</UL>

<P><STRONG><a name="[10f]"></a>QProblemB::backsolveR(const double*, BooleanType, BooleanType, double*)</STRONG> (Thumb, 578 bytes, Stack size 72 bytes, qproblemb.o(i._ZN9QProblemB10backsolveREPKd11BooleanTypeS2_Pd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = QProblemB::backsolveR(const double*, BooleanType, BooleanType, double*) &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getNZ()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAbs(double)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGlobalMessageHandler()
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::removeBound(int, BooleanType)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::backsolveR(const double*, BooleanType, double*)
</UL>

<P><STRONG><a name="[112]"></a>QProblemB::removeBound(int, BooleanType)</STRONG> (Thumb, 556 bytes, Stack size 464 bytes, qproblemb.o(i._ZN9QProblemB11removeBoundEi11BooleanType))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = QProblemB::removeBound(int, BooleanType) &rArr; Bounds::moveFixedToFree(int) &rArr; SubjectTo::addIndex(Indexlist*, int, SubjectToStatus) &rArr; Indexlist::addNumber(int) &rArr; MessageHandling::throwWarning(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr; MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr;  MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Indexlist::getNumberArray(int*) const
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::moveFixedToFree(int)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getStatus() const
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getNFR()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::backsolveR(const double*, BooleanType, BooleanType, double*)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::getFree()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGlobalMessageHandler()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupAuxiliaryWorkingSet(const Bounds*, BooleanType)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_performStep(const int*, const int*, const double*, const double*, const double*, const double*, const double*, const double*, int, SubjectToStatus)
</UL>

<P><STRONG><a name="[116]"></a>QProblemB::setupQPdata(const double*, const double*, const double*, const double*, const double*)</STRONG> (Thumb, 478 bytes, Stack size 56 bytes, qproblemb.o(i._ZN9QProblemB11setupQPdataEPKdS1_S1_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = QProblemB::setupQPdata(const double*, const double*, const double*, const double*, const double*) &rArr; MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr;  MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getNV() const
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGlobalMessageHandler()
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::init(const double*, const double*, const double*, const double*, int&, const double*, double*)
</UL>

<P><STRONG><a name="[118]"></a>QProblemB::solveInitialQP(const double*, const double*, const Bounds*, int&, double*)</STRONG> (Thumb, 898 bytes, Stack size 568 bytes, qproblemb.o(i._ZN9QProblemB14solveInitialQPEPKdS1_PK6BoundsRiPd))
<BR><BR>[Stack]<UL><LI>Max Depth = 2640<LI>Call Chain = QProblemB::solveInitialQP(const double*, const double*, const Bounds*, int&, double*) &rArr; QProblemB::hotstart(const double*, const double*, const double*, int&, double*) &rArr; QProblemB::hotstart_performStep(const int*, const int*, const double*, const double*, const double*, const double*, const double*, const double*, int, SubjectToStatus) &rArr; QProblemB::removeBound(int, BooleanType) &rArr; Bounds::moveFixedToFree(int) &rArr; SubjectTo::addIndex(Indexlist*, int, SubjectToStatus) &rArr; Indexlist::addNumber(int) &rArr; MessageHandling::throwWarning(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr; MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr;  MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::Bounds()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::init(int)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::setupAllFree()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwInfo(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getNV() const
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::obtainAuxiliaryWorkingSet(const double*, const double*, const Bounds*, Bounds*) const
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart(const double*, const double*, const double*, int&, double*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getNFR()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupCholeskyDecomposition()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupAuxiliaryWorkingSet(const Bounds*, BooleanType)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupAuxiliaryQPsolution(const double*, const double*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupAuxiliaryQPgradient()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::checkForIdentityHessian()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupAuxiliaryQPbounds(BooleanType)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupSubjectToType()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGlobalMessageHandler()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCPUtime()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::init(const double*, const double*, const double*, const double*, int&, const double*, double*)
</UL>

<P><STRONG><a name="[133]"></a>QProblemB::checkKKTconditions()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qproblemb.o(i._ZN9QProblemB18checkKKTconditionsEv))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart(const double*, const double*, const double*, int&, double*)
</UL>

<P><STRONG><a name="[11b]"></a>QProblemB::setupSubjectToType()</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, qproblemb.o(i._ZN9QProblemB18setupSubjectToTypeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = QProblemB::setupSubjectToType() &rArr; SubjectTo::setType(int, SubjectToType) &rArr; MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr;  MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getNV() const
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubjectTo::setType(int, SubjectToType)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubjectTo::setNoUpper(BooleanType)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubjectTo::setNoLower(BooleanType)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::solveInitialQP(const double*, const double*, const Bounds*, int&, double*)
</UL>

<P><STRONG><a name="[127]"></a>QProblemB::hotstart_performStep(const int*, const int*, const double*, const double*, const double*, const double*, const double*, const double*, int, SubjectToStatus)</STRONG> (Thumb, 898 bytes, Stack size 72 bytes, qproblemb.o(i._ZN9QProblemB20hotstart_performStepEPKiS1_PKdS3_S3_S3_S3_S3_i15SubjectToStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = QProblemB::hotstart_performStep(const int*, const int*, const double*, const double*, const double*, const double*, const double*, const double*, int, SubjectToStatus) &rArr; QProblemB::removeBound(int, BooleanType) &rArr; Bounds::moveFixedToFree(int) &rArr; SubjectTo::addIndex(Indexlist*, int, SubjectToStatus) &rArr; Indexlist::addNumber(int) &rArr; MessageHandling::throwWarning(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr; MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr;  MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getNV() const
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::areBoundsConsistent(const double*, const double*) const
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::addBound(int, SubjectToStatus, BooleanType)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getNFX()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getNFR()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::removeBound(int, BooleanType)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGlobalMessageHandler()
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart(const double*, const double*, const double*, int&, double*)
</UL>

<P><STRONG><a name="[122]"></a>QProblemB::setupAuxiliaryQPbounds(BooleanType)</STRONG> (Thumb, 508 bytes, Stack size 40 bytes, qproblemb.o(i._ZN9QProblemB22setupAuxiliaryQPboundsE11BooleanType))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = QProblemB::setupAuxiliaryQPbounds(BooleanType) &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubjectTo::getStatus(int) const
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubjectTo::getType(int) const
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getNV() const
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGlobalMessageHandler()
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::solveInitialQP(const double*, const double*, const Bounds*, int&, double*)
</UL>

<P><STRONG><a name="[11a]"></a>QProblemB::checkForIdentityHessian()</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, qproblemb.o(i._ZN9QProblemB23checkForIdentityHessianEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = QProblemB::checkForIdentityHessian() &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getNV() const
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAbs(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::solveInitialQP(const double*, const double*, const Bounds*, int&, double*)
</UL>

<P><STRONG><a name="[121]"></a>QProblemB::setupAuxiliaryQPgradient()</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, qproblemb.o(i._ZN9QProblemB24setupAuxiliaryQPgradientEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = QProblemB::setupAuxiliaryQPgradient() &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getNV() const
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::solveInitialQP(const double*, const double*, const Bounds*, int&, double*)
</UL>

<P><STRONG><a name="[11c]"></a>QProblemB::setupAuxiliaryQPsolution(const double*, const double*)</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, qproblemb.o(i._ZN9QProblemB24setupAuxiliaryQPsolutionEPKdS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QProblemB::setupAuxiliaryQPsolution(const double*, const double*)
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getNV() const
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::solveInitialQP(const double*, const double*, const Bounds*, int&, double*)
</UL>

<P><STRONG><a name="[11f]"></a>QProblemB::setupAuxiliaryWorkingSet(const Bounds*, BooleanType)</STRONG> (Thumb, 394 bytes, Stack size 48 bytes, qproblemb.o(i._ZN9QProblemB24setupAuxiliaryWorkingSetEPK6Bounds11BooleanType))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = QProblemB::setupAuxiliaryWorkingSet(const Bounds*, BooleanType) &rArr; QProblemB::removeBound(int, BooleanType) &rArr; Bounds::moveFixedToFree(int) &rArr; SubjectTo::addIndex(Indexlist*, int, SubjectToStatus) &rArr; Indexlist::addNumber(int) &rArr; MessageHandling::throwWarning(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr; MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr;  MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubjectTo::getStatus(int) const
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getNV() const
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::addBound(int, SubjectToStatus, BooleanType)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::removeBound(int, BooleanType)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGlobalMessageHandler()
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::solveInitialQP(const double*, const double*, const Bounds*, int&, double*)
</UL>

<P><STRONG><a name="[120]"></a>QProblemB::setupCholeskyDecomposition()</STRONG> (Thumb, 660 bytes, Stack size 160 bytes, qproblemb.o(i._ZN9QProblemB26setupCholeskyDecompositionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = QProblemB::setupCholeskyDecomposition() &rArr; Indexlist::getNumberArray(int*) const &rArr; MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr;  MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Indexlist::getNumberArray(int*) const
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getNV() const
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getNFR()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::getFree()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGlobalMessageHandler()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::solveInitialQP(const double*, const double*, const Bounds*, int&, double*)
</UL>

<P><STRONG><a name="[12c]"></a>QProblemB::hotstart_determineDataShift(const int*, const double*, const double*, const double*, double*, double*, double*, BooleanType&)</STRONG> (Thumb, 486 bytes, Stack size 64 bytes, qproblemb.o(i._ZN9QProblemB27hotstart_determineDataShiftEPKiPKdS3_S3_PdS4_S4_R11BooleanType))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = QProblemB::hotstart_determineDataShift(const int*, const double*, const double*, const double*, double*, double*, double*, BooleanType&) &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getNV() const
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getNFX()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAbs(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart(const double*, const double*, const double*, int&, double*)
</UL>

<P><STRONG><a name="[12d]"></a>QProblemB::hotstart_determineStepLength(const int*, const int*, const double*, const double*, const double*, const double*, int&, SubjectToStatus&)</STRONG> (Thumb, 1206 bytes, Stack size 96 bytes, qproblemb.o(i._ZN9QProblemB28hotstart_determineStepLengthEPKiS1_PKdS3_S3_S3_RiR15SubjectToStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = QProblemB::hotstart_determineStepLength(const int*, const int*, const double*, const double*, const double*, const double*, int&, SubjectToStatus&) &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubjectTo::getStatus(int) const
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubjectTo::getType(int) const
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getNFX()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getNFR()
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart(const double*, const double*, const double*, int&, double*)
</UL>

<P><STRONG><a name="[12e]"></a>QProblemB::hotstart_determineStepDirection(const int*, const int*, const double*, const double*, const double*, BooleanType, double*, double*, double*)</STRONG> (Thumb, 862 bytes, Stack size 560 bytes, qproblemb.o(i._ZN9QProblemB31hotstart_determineStepDirectionEPKiS1_PKdS3_S3_11BooleanTypePdS5_S5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = QProblemB::hotstart_determineStepDirection(const int*, const int*, const double*, const double*, const double*, BooleanType, double*, double*, double*) &rArr; QProblemB::backsolveR(const double*, BooleanType, double*) &rArr; QProblemB::backsolveR(const double*, BooleanType, BooleanType, double*) &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubjectTo::getStatus(int) const
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getNFX()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getNFR()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::backsolveR(const double*, BooleanType, double*)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGlobalMessageHandler()
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart(const double*, const double*, const double*, int&, double*)
</UL>

<P><STRONG><a name="[12f]"></a>QProblemB::init(const double*, const double*, const double*, const double*, int&, const double*, double*)</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, qproblemb.o(i._ZN9QProblemB4initEPKdS1_S1_S1_RiS1_Pd))
<BR><BR>[Stack]<UL><LI>Max Depth = 2696<LI>Call Chain = QProblemB::init(const double*, const double*, const double*, const double*, int&, const double*, double*) &rArr; QProblemB::solveInitialQP(const double*, const double*, const Bounds*, int&, double*) &rArr; QProblemB::hotstart(const double*, const double*, const double*, int&, double*) &rArr; QProblemB::hotstart_performStep(const int*, const int*, const double*, const double*, const double*, const double*, const double*, const double*, int, SubjectToStatus) &rArr; QProblemB::removeBound(int, BooleanType) &rArr; Bounds::moveFixedToFree(int) &rArr; SubjectTo::addIndex(Indexlist*, int, SubjectToStatus) &rArr; Indexlist::addNumber(int) &rArr; MessageHandling::throwWarning(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr; MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr;  MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::solveInitialQP(const double*, const double*, const Bounds*, int&, double*)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupQPdata(const double*, const double*, const double*, const double*, const double*)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGlobalMessageHandler()
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_solve
</UL>

<P><STRONG><a name="[110]"></a>QProblemB::getNZ()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, qproblemb.o(i._ZN9QProblemB5getNZEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QProblemB::getNZ()
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::getFree()
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::backsolveR(const double*, BooleanType, BooleanType, double*)
</UL>

<P><STRONG><a name="[113]"></a>QProblemB::getNFR()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, qproblemb.o(i._ZN9QProblemB6getNFREv))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::addBound(int, SubjectToStatus, BooleanType)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_determineStepDirection(const int*, const int*, const double*, const double*, const double*, BooleanType, double*, double*, double*)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_determineStepLength(const int*, const int*, const double*, const double*, const double*, const double*, int&, SubjectToStatus&)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupCholeskyDecomposition()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_performStep(const int*, const int*, const double*, const double*, const double*, const double*, const double*, const double*, int, SubjectToStatus)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::solveInitialQP(const double*, const double*, const Bounds*, int&, double*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::removeBound(int, BooleanType)
</UL>

<P><STRONG><a name="[128]"></a>QProblemB::getNFX()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, qproblemb.o(i._ZN9QProblemB6getNFXEv))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_determineStepDirection(const int*, const int*, const double*, const double*, const double*, BooleanType, double*, double*, double*)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_determineStepLength(const int*, const int*, const double*, const double*, const double*, const double*, int&, SubjectToStatus&)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_determineDataShift(const int*, const double*, const double*, const double*, double*, double*, double*, BooleanType&)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_performStep(const int*, const int*, const double*, const double*, const double*, const double*, const double*, const double*, int, SubjectToStatus)
</UL>

<P><STRONG><a name="[12a]"></a>QProblemB::addBound(int, SubjectToStatus, BooleanType)</STRONG> (Thumb, 592 bytes, Stack size 72 bytes, qproblemb.o(i._ZN9QProblemB8addBoundEi15SubjectToStatus11BooleanType))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = QProblemB::addBound(int, SubjectToStatus, BooleanType) &rArr; Bounds::moveFreeToFixed(int, SubjectToStatus) &rArr; SubjectTo::addIndex(Indexlist*, int, SubjectToStatus) &rArr; Indexlist::addNumber(int) &rArr; MessageHandling::throwWarning(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr; MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr;  MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Indexlist::getIndex(int) const
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::moveFreeToFixed(int, SubjectToStatus)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getStatus() const
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::computeGivens(double, double, double&, double&, double&, double&) const
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::applyGivens(double, double, double, double, double&, double&) const
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getNFR()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::getFree()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGlobalMessageHandler()
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupAuxiliaryWorkingSet(const Bounds*, BooleanType)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_performStep(const int*, const int*, const double*, const double*, const double*, const double*, const double*, const double*, int, SubjectToStatus)
</UL>

<P><STRONG><a name="[123]"></a>QProblemB::hotstart(const double*, const double*, const double*, int&, double*)</STRONG> (Thumb, 854 bytes, Stack size 1232 bytes, qproblemb.o(i._ZN9QProblemB8hotstartEPKdS1_S1_RiPd))
<BR><BR>[Stack]<UL><LI>Max Depth = 2072<LI>Call Chain = QProblemB::hotstart(const double*, const double*, const double*, int&, double*) &rArr; QProblemB::hotstart_performStep(const int*, const int*, const double*, const double*, const double*, const double*, const double*, const double*, int, SubjectToStatus) &rArr; QProblemB::removeBound(int, BooleanType) &rArr; Bounds::moveFixedToFree(int) &rArr; SubjectTo::addIndex(Indexlist*, int, SubjectToStatus) &rArr; Indexlist::addNumber(int) &rArr; MessageHandling::throwWarning(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr; MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr;  MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Indexlist::getNumberArray(int*) const
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwInfo(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getStatus() const
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_determineStepDirection(const int*, const int*, const double*, const double*, const double*, BooleanType, double*, double*, double*)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_determineStepLength(const int*, const int*, const double*, const double*, const double*, const double*, int&, SubjectToStatus&)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_determineDataShift(const int*, const double*, const double*, const double*, double*, double*, double*, BooleanType&)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_performStep(const int*, const int*, const double*, const double*, const double*, const double*, const double*, const double*, int, SubjectToStatus)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::checkKKTconditions()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::getFree()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGlobalMessageHandler()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCPUtime()
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::solveInitialQP(const double*, const double*, const Bounds*, int&, double*)
</UL>

<P><STRONG><a name="[134]"></a>QProblemB::QProblemB(int)</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, qproblemb.o(i._ZN9QProblemBC1Ei))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = QProblemB::QProblemB(int) &rArr; MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr;  MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::Bounds()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::init(int)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::reset()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGlobalMessageHandler()
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_solve
</UL>

<P><STRONG><a name="[198]"></a>QProblemB::QProblemB__sub_object(int)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, qproblemb.o(i._ZN9QProblemBC1Ei), UNUSED)

<P><STRONG><a name="[136]"></a>QProblemB::~QProblemB()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, qproblemb.o(i._ZN9QProblemBD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QProblemB::~QProblemB() &rArr; Bounds::~Bounds()
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::~Bounds()
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_solve
</UL>

<P><STRONG><a name="[199]"></a>QProblemB::~QProblemB__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, qproblemb.o(i._ZN9QProblemBD1Ev), UNUSED)

<P><STRONG><a name="[124]"></a>SubjectTo::setNoLower(BooleanType)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qproblemb.o(i._ZN9SubjectTo10setNoLowerE11BooleanType))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupSubjectToType()
</UL>

<P><STRONG><a name="[125]"></a>SubjectTo::setNoUpper(BooleanType)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qproblemb.o(i._ZN9SubjectTo10setNoUpperE11BooleanType))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupSubjectToType()
</UL>

<P><STRONG><a name="[100]"></a>SubjectTo::removeIndex(Indexlist*, int)</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, subjectto.o(i._ZN9SubjectTo11removeIndexEP9Indexlisti))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SubjectTo::removeIndex(Indexlist*, int) &rArr; MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr;  MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Indexlist::removeNumber(int)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGlobalMessageHandler()
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::moveFreeToFixed(int, SubjectToStatus)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::moveFixedToFree(int)
</UL>

<P><STRONG><a name="[104]"></a>SubjectTo::init(int)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, subjectto.o(i._ZN9SubjectTo4initEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SubjectTo::init(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::init(int)
</UL>

<P><STRONG><a name="[126]"></a>SubjectTo::setType(int, SubjectToType)</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, qproblemb.o(i._ZN9SubjectTo7setTypeEi13SubjectToType))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SubjectTo::setType(int, SubjectToType) &rArr; MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr;  MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGlobalMessageHandler()
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupSubjectToType()
</UL>

<P><STRONG><a name="[fb]"></a>SubjectTo::addIndex(Indexlist*, int, SubjectToStatus)</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, subjectto.o(i._ZN9SubjectTo8addIndexEP9Indexlisti15SubjectToStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SubjectTo::addIndex(Indexlist*, int, SubjectToStatus) &rArr; Indexlist::addNumber(int) &rArr; MessageHandling::throwWarning(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr; MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr;  MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Indexlist::addNumber(int)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGlobalMessageHandler()
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::moveFreeToFixed(int, SubjectToStatus)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::moveFixedToFree(int)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::setupBound(int, SubjectToStatus)
</UL>

<P><STRONG><a name="[106]"></a>SubjectTo::SubjectTo()</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, subjectto.o(i._ZN9SubjectToC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::Bounds()
</UL>

<P><STRONG><a name="[19a]"></a>SubjectTo::SubjectTo__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, subjectto.o(i._ZN9SubjectToC1Ev), UNUSED)

<P><STRONG><a name="[109]"></a>SubjectTo::~SubjectTo()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, subjectto.o(i._ZN9SubjectToD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::~Bounds()
</UL>

<P><STRONG><a name="[19b]"></a>SubjectTo::~SubjectTo__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, subjectto.o(i._ZN9SubjectToD1Ev), UNUSED)

<P><STRONG><a name="[f8]"></a>Bounds::getNV() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bounds.o(i._ZNK6Bounds5getNVEv))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::moveFreeToFixed(int, SubjectToStatus)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::moveFixedToFree(int)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::setupBound(int, SubjectToStatus)
</UL>

<P><STRONG><a name="[10d]"></a>Indexlist::getNumberArray(int*) const</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, indexlist.o(i._ZNK9Indexlist14getNumberArrayEPi))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Indexlist::getNumberArray(int*) const &rArr; MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr;  MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGlobalMessageHandler()
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart(const double*, const double*, const double*, int&, double*)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupCholeskyDecomposition()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::removeBound(int, BooleanType)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Indexlist::addNumber(int)
</UL>

<P><STRONG><a name="[10b]"></a>Indexlist::getPhysicalIndex(int) const</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, indexlist.o(i._ZNK9Indexlist16getPhysicalIndexEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Indexlist::getPhysicalIndex(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Indexlist::removeNumber(int)
</UL>

<P><STRONG><a name="[130]"></a>Indexlist::getIndex(int) const</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, indexlist.o(i._ZNK9Indexlist8getIndexEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Indexlist::getIndex(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::addBound(int, SubjectToStatus, BooleanType)
</UL>

<P><STRONG><a name="[132]"></a>QProblemB::applyGivens(double, double, double, double, double&, double&) const</STRONG> (Thumb, 146 bytes, Stack size 72 bytes, qproblemb.o(i._ZNK9QProblemB11applyGivensEddddRdS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = QProblemB::applyGivens(double, double, double, double, double&, double&) const &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::addBound(int, SubjectToStatus, BooleanType)
</UL>

<P><STRONG><a name="[131]"></a>QProblemB::computeGivens(double, double, double&, double&, double&, double&) const</STRONG> (Thumb, 404 bytes, Stack size 104 bytes, qproblemb.o(i._ZNK9QProblemB13computeGivensEddRdS0_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = QProblemB::computeGivens(double, double, double&, double&, double&, double&) const &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAbs(double)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::addBound(int, SubjectToStatus, BooleanType)
</UL>

<P><STRONG><a name="[137]"></a>QProblemB::getDualSolution(double*) const</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, qproblemb.o(i._ZNK9QProblemB15getDualSolutionEPd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QProblemB::getDualSolution(double*) const
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getStatus() const
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getNV() const
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_solve
</UL>

<P><STRONG><a name="[138]"></a>QProblemB::getPrimalSolution(double*) const</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, qproblemb.o(i._ZNK9QProblemB17getPrimalSolutionEPd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QProblemB::getPrimalSolution(double*) const
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getStatus() const
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getNV() const
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_solve
</UL>

<P><STRONG><a name="[129]"></a>QProblemB::areBoundsConsistent(const double*, const double*) const</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, qproblemb.o(i._ZNK9QProblemB19areBoundsConsistentEPKdS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = QProblemB::areBoundsConsistent(const double*, const double*) const &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getNV() const
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_performStep(const int*, const int*, const double*, const double*, const double*, const double*, const double*, const double*, int, SubjectToStatus)
</UL>

<P><STRONG><a name="[11e]"></a>QProblemB::obtainAuxiliaryWorkingSet(const double*, const double*, const Bounds*, Bounds*) const</STRONG> (Thumb, 1008 bytes, Stack size 56 bytes, qproblemb.o(i._ZNK9QProblemB25obtainAuxiliaryWorkingSetEPKdS1_PK6BoundsPS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = QProblemB::obtainAuxiliaryWorkingSet(const double*, const double*, const Bounds*, Bounds*) const &rArr; Bounds::setupBound(int, SubjectToStatus) &rArr; SubjectTo::addIndex(Indexlist*, int, SubjectToStatus) &rArr; Indexlist::addNumber(int) &rArr; MessageHandling::throwWarning(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr; MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr;  MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::setupBound(int, SubjectToStatus)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubjectTo::getStatus(int) const
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubjectTo::getType(int) const
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getNV() const
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGlobalMessageHandler()
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::solveInitialQP(const double*, const double*, const Bounds*, int&, double*)
</UL>

<P><STRONG><a name="[117]"></a>QProblemB::getNV() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, qproblemb.o(i._ZNK9QProblemB5getNVEv))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::obtainAuxiliaryWorkingSet(const double*, const double*, const Bounds*, Bounds*) const
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::areBoundsConsistent(const double*, const double*) const
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getPrimalSolution(double*) const
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getDualSolution(double*) const
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_determineDataShift(const int*, const double*, const double*, const double*, double*, double*, double*, BooleanType&)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupCholeskyDecomposition()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupAuxiliaryWorkingSet(const Bounds*, BooleanType)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupAuxiliaryQPsolution(const double*, const double*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupAuxiliaryQPgradient()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::checkForIdentityHessian()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupAuxiliaryQPbounds(BooleanType)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_performStep(const int*, const int*, const double*, const double*, const double*, const double*, const double*, const double*, int, SubjectToStatus)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupSubjectToType()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::solveInitialQP(const double*, const double*, const Bounds*, int&, double*)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupQPdata(const double*, const double*, const double*, const double*, const double*)
</UL>

<P><STRONG><a name="[114]"></a>QProblemB::getStatus() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, qproblemb.o(i._ZNK9QProblemB9getStatusEv))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getPrimalSolution(double*) const
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getDualSolution(double*) const
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart(const double*, const double*, const double*, int&, double*)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::addBound(int, SubjectToStatus, BooleanType)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::removeBound(int, BooleanType)
</UL>

<P><STRONG><a name="[fe]"></a>SubjectTo::getType(int) const</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, qproblemb.o(i._ZNK9SubjectTo7getTypeEi))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bounds::setupAllFree()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::obtainAuxiliaryWorkingSet(const double*, const double*, const Bounds*, Bounds*) const
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_determineStepLength(const int*, const int*, const double*, const double*, const double*, const double*, int&, SubjectToStatus&)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupAuxiliaryQPbounds(BooleanType)
</UL>

<P><STRONG><a name="[12b]"></a>SubjectTo::getStatus(int) const</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, qproblemb.o(i._ZNK9SubjectTo9getStatusEi))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::obtainAuxiliaryWorkingSet(const double*, const double*, const Bounds*, Bounds*) const
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_determineStepDirection(const int*, const int*, const double*, const double*, const double*, BooleanType, double*, double*, double*)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::hotstart_determineStepLength(const int*, const int*, const double*, const double*, const double*, const double*, int&, SubjectToStatus&)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupAuxiliaryWorkingSet(const Bounds*, BooleanType)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupAuxiliaryQPbounds(BooleanType)
</UL>

<P><STRONG><a name="[139]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[19c]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[175]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle
</UL>

<P><STRONG><a name="[19d]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[19e]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[11d]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::solveInitialQP(const double*, const double*, const Bounds*, int&, double*)
</UL>

<P><STRONG><a name="[169]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_solve_dim4_system
</UL>

<P><STRONG><a name="[115]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::computeGivens(double, double, double&, double&, double&, double&) const
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::setupCholeskyDecomposition()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::removeBound(int, BooleanType)
</UL>

<P><STRONG><a name="[17e]"></a>__measureOutput</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, low_lvl_main.o(i.__measureOutput))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measureOutput
</UL>

<P><STRONG><a name="[19f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1a0]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1a1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[13c]"></a>__setControlValue</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, low_lvl_main.o(i.__setControlValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __setControlValue &rArr; HAL_DAC_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_control_value
</UL>

<P><STRONG><a name="[13b]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[143]"></a>acado_condenseFdb</STRONG> (Thumb, 7400 bytes, Stack size 48 bytes, acado_solver.o(i.acado_condenseFdb))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = acado_condenseFdb &rArr; acado_multEQDy &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multRDy
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multQDy
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multEQDy
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_feedbackStep
</UL>

<P><STRONG><a name="[147]"></a>acado_condensePrep</STRONG> (Thumb, 9526 bytes, Stack size 8 bytes, acado_solver.o(i.acado_condensePrep))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = acado_condensePrep &rArr; acado_setBlockH11 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_zeroBlockH11
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_zeroBlockH10
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_setBlockH11_R1
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_setBlockH11
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multQN1d
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multQN1Gu
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multQETGx
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multQ1d
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multQ1Gu
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multGxd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multGxGx
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multGxGu
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_moveGxT
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_moveGuE
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_macETSlu
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_copyHTH
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_preparationStep
</UL>

<P><STRONG><a name="[154]"></a>acado_copyHTH</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, acado_solver.o(i.acado_copyHTH))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_condensePrep
</UL>

<P><STRONG><a name="[162]"></a>acado_diffs</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, acado_integrator.o(i.acado_diffs))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_integrate
</UL>

<P><STRONG><a name="[159]"></a>acado_evaluateLSQ</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, acado_solver.o(i.acado_evaluateLSQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = acado_evaluateLSQ
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_evaluateObjective
</UL>

<P><STRONG><a name="[15a]"></a>acado_evaluateLSQEndTerm</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, acado_solver.o(i.acado_evaluateLSQEndTerm))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_evaluateObjective
</UL>

<P><STRONG><a name="[158]"></a>acado_evaluateObjective</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, acado_solver.o(i.acado_evaluateObjective))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = acado_evaluateObjective &rArr; acado_evaluateLSQ
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_evaluateLSQEndTerm
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_evaluateLSQ
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_preparationStep
</UL>

<P><STRONG><a name="[15b]"></a>acado_expand</STRONG> (Thumb, 5694 bytes, Stack size 56 bytes, acado_solver.o(i.acado_expand))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = acado_expand &rArr; acado_multEDu &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_multEDu
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_feedbackStep
</UL>

<P><STRONG><a name="[15d]"></a>acado_feedbackStep</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, acado_solver.o(i.acado_feedbackStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 12512<LI>Call Chain = acado_feedbackStep &rArr; acado_solve &rArr; QProblemB::init(const double*, const double*, const double*, const double*, int&, const double*, double*) &rArr; QProblemB::solveInitialQP(const double*, const double*, const Bounds*, int&, double*) &rArr; QProblemB::hotstart(const double*, const double*, const double*, int&, double*) &rArr; QProblemB::hotstart_performStep(const int*, const int*, const double*, const double*, const double*, const double*, const double*, const double*, int, SubjectToStatus) &rArr; QProblemB::removeBound(int, BooleanType) &rArr; Bounds::moveFixedToFree(int) &rArr; SubjectTo::addIndex(Indexlist*, int, SubjectToStatus) &rArr; Indexlist::addNumber(int) &rArr; MessageHandling::throwWarning(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr; MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr;  MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_solve
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_expand
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_condenseFdb
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15f]"></a>acado_initializeSolver</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, acado_solver.o(i.acado_initializeSolver))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = acado_initializeSolver
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_setup
</UL>

<P><STRONG><a name="[161]"></a>acado_integrate</STRONG> (Thumb, 5012 bytes, Stack size 80 bytes, acado_integrator.o(i.acado_integrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = acado_integrate &rArr; acado_solve_dim4_system &rArr; acado_solve_dim4_triangular &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_solve_dim4_system_reuse
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_solve_dim4_system
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_rhs
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_diffs
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_shiftStates
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_modelSimulation
</UL>

<P><STRONG><a name="[157]"></a>acado_macETSlu</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, acado_solver.o(i.acado_macETSlu))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = acado_macETSlu &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_condensePrep
</UL>

<P><STRONG><a name="[166]"></a>acado_modelSimulation</STRONG> (Thumb, 402 bytes, Stack size 16 bytes, acado_solver.o(i.acado_modelSimulation))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = acado_modelSimulation &rArr; acado_integrate &rArr; acado_solve_dim4_system &rArr; acado_solve_dim4_triangular &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_integrate
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_preparationStep
</UL>

<P><STRONG><a name="[148]"></a>acado_moveGuE</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, acado_solver.o(i.acado_moveGuE))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_condensePrep
</UL>

<P><STRONG><a name="[149]"></a>acado_moveGxT</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, acado_solver.o(i.acado_moveGxT))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_condensePrep
</UL>

<P><STRONG><a name="[15c]"></a>acado_multEDu</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, acado_solver.o(i.acado_multEDu))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = acado_multEDu &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_expand
</UL>

<P><STRONG><a name="[146]"></a>acado_multEQDy</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, acado_solver.o(i.acado_multEQDy))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = acado_multEQDy &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_condenseFdb
</UL>

<P><STRONG><a name="[14c]"></a>acado_multGxGu</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, acado_solver.o(i.acado_multGxGu))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = acado_multGxGu &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_condensePrep
</UL>

<P><STRONG><a name="[14b]"></a>acado_multGxGx</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, acado_solver.o(i.acado_multGxGx))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = acado_multGxGx &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_condensePrep
</UL>

<P><STRONG><a name="[14a]"></a>acado_multGxd</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, acado_solver.o(i.acado_multGxd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = acado_multGxd &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_condensePrep
</UL>

<P><STRONG><a name="[14d]"></a>acado_multQ1Gu</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, acado_solver.o(i.acado_multQ1Gu))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = acado_multQ1Gu &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_condensePrep
</UL>

<P><STRONG><a name="[155]"></a>acado_multQ1d</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, acado_solver.o(i.acado_multQ1d))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = acado_multQ1d &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_condensePrep
</UL>

<P><STRONG><a name="[145]"></a>acado_multQDy</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, acado_solver.o(i.acado_multQDy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = acado_multQDy &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_condenseFdb
</UL>

<P><STRONG><a name="[150]"></a>acado_multQETGx</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, acado_solver.o(i.acado_multQETGx))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = acado_multQETGx &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_condensePrep
</UL>

<P><STRONG><a name="[14e]"></a>acado_multQN1Gu</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, acado_solver.o(i.acado_multQN1Gu))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = acado_multQN1Gu &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_condensePrep
</UL>

<P><STRONG><a name="[156]"></a>acado_multQN1d</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, acado_solver.o(i.acado_multQN1d))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = acado_multQN1d &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_condensePrep
</UL>

<P><STRONG><a name="[144]"></a>acado_multRDy</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, acado_solver.o(i.acado_multRDy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = acado_multRDy &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_condenseFdb
</UL>

<P><STRONG><a name="[167]"></a>acado_preparationStep</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, acado_solver.o(i.acado_preparationStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = acado_preparationStep &rArr; acado_modelSimulation &rArr; acado_integrate &rArr; acado_solve_dim4_system &rArr; acado_solve_dim4_triangular &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_modelSimulation
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_evaluateObjective
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_condensePrep
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_setup
</UL>

<P><STRONG><a name="[163]"></a>acado_rhs</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, acado_integrator.o(i.acado_rhs))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = acado_rhs &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_integrate
</UL>

<P><STRONG><a name="[152]"></a>acado_setBlockH11</STRONG> (Thumb, 640 bytes, Stack size 48 bytes, acado_solver.o(i.acado_setBlockH11))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = acado_setBlockH11 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_condensePrep
</UL>

<P><STRONG><a name="[151]"></a>acado_setBlockH11_R1</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, acado_solver.o(i.acado_setBlockH11_R1))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_condensePrep
</UL>

<P><STRONG><a name="[17c]"></a>acado_shiftControls</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, acado_solver.o(i.acado_shiftControls))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[168]"></a>acado_shiftStates</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, acado_solver.o(i.acado_shiftStates))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = acado_shiftStates &rArr; acado_integrate &rArr; acado_solve_dim4_system &rArr; acado_solve_dim4_triangular &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_integrate
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15e]"></a>acado_solve</STRONG> (Thumb, 90 bytes, Stack size 9808 bytes, acado_qpoases_interface.o(i.acado_solve))
<BR><BR>[Stack]<UL><LI>Max Depth = 12504<LI>Call Chain = acado_solve &rArr; QProblemB::init(const double*, const double*, const double*, const double*, int&, const double*, double*) &rArr; QProblemB::solveInitialQP(const double*, const double*, const Bounds*, int&, double*) &rArr; QProblemB::hotstart(const double*, const double*, const double*, int&, double*) &rArr; QProblemB::hotstart_performStep(const int*, const int*, const double*, const double*, const double*, const double*, const double*, const double*, int, SubjectToStatus) &rArr; QProblemB::removeBound(int, BooleanType) &rArr; Bounds::moveFixedToFree(int) &rArr; SubjectTo::addIndex(Indexlist*, int, SubjectToStatus) &rArr; Indexlist::addNumber(int) &rArr; MessageHandling::throwWarning(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr; MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr;  MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getPrimalSolution(double*) const
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::getDualSolution(double*) const
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::~QProblemB()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::QProblemB(int)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QProblemB::init(const double*, const double*, const double*, const double*, int&, const double*, double*)
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_feedbackStep
</UL>

<P><STRONG><a name="[164]"></a>acado_solve_dim4_system</STRONG> (Thumb, 4358 bytes, Stack size 56 bytes, acado_integrator.o(i.acado_solve_dim4_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = acado_solve_dim4_system &rArr; acado_solve_dim4_triangular &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_solve_dim4_triangular
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_integrate
</UL>

<P><STRONG><a name="[165]"></a>acado_solve_dim4_system_reuse</STRONG> (Thumb, 568 bytes, Stack size 24 bytes, acado_integrator.o(i.acado_solve_dim4_system_reuse))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = acado_solve_dim4_system_reuse &rArr; acado_solve_dim4_triangular &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_solve_dim4_triangular
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_integrate
</UL>

<P><STRONG><a name="[16a]"></a>acado_solve_dim4_triangular</STRONG> (Thumb, 560 bytes, Stack size 24 bytes, acado_integrator.o(i.acado_solve_dim4_triangular))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = acado_solve_dim4_triangular &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_solve_dim4_system_reuse
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_solve_dim4_system
</UL>

<P><STRONG><a name="[14f]"></a>acado_zeroBlockH10</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, acado_solver.o(i.acado_zeroBlockH10))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_condensePrep
</UL>

<P><STRONG><a name="[153]"></a>acado_zeroBlockH11</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, acado_solver.o(i.acado_zeroBlockH11))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_condensePrep
</UL>

<P><STRONG><a name="[16b]"></a>change_setpoint</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, main_mpc.o(i.change_setpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = change_setpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[16d]"></a>controller_setup</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, main_mpc.o(i.controller_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = controller_setup &rArr; acado_preparationStep &rArr; acado_modelSimulation &rArr; acado_integrate &rArr; acado_solve_dim4_system &rArr; acado_solve_dim4_triangular &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_preparationStep
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_initializeSolver
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16e]"></a>controls</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main_mpc.o(i.controls))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = controls &rArr; set_control_value &rArr; __setControlValue &rArr; HAL_DAC_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_control_value
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>emergency_write_string</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, low_lvl_main.o(i.emergency_write_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = emergency_write_string &rArr; HAL_UART_Transmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetState
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[92]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[172]"></a>hardware_setup</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main_mpc.o(i.hardware_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = hardware_setup &rArr; low_lvl_main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[174]"></a>idle</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, main_mpc.o(i.idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = idle &rArr; write_string &rArr; HAL_UART_Transmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_string
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[177]"></a>loop</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, main_mpc.o(i.loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = loop &rArr; change_setpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_setpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[173]"></a>low_lvl_main</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, low_lvl_main.o(i.low_lvl_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = low_lvl_main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Start
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_SetValue
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_setup
</UL>

<P><STRONG><a name="[6d]"></a>main</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, main_mpc.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 12536<LI>Call Chain = main &rArr; acado_feedbackStep &rArr; acado_solve &rArr; QProblemB::init(const double*, const double*, const double*, const double*, int&, const double*, double*) &rArr; QProblemB::solveInitialQP(const double*, const double*, const Bounds*, int&, double*) &rArr; QProblemB::hotstart(const double*, const double*, const double*, int&, double*) &rArr; QProblemB::hotstart_performStep(const int*, const int*, const double*, const double*, const double*, const double*, const double*, const double*, int, SubjectToStatus) &rArr; QProblemB::removeBound(int, BooleanType) &rArr; Bounds::moveFixedToFree(int) &rArr; SubjectTo::addIndex(Indexlist*, int, SubjectToStatus) &rArr; Indexlist::addNumber(int) &rArr; MessageHandling::throwWarning(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr; MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) &rArr;  MessageHandling::throwError(returnValue, const char*, const char*, const char*, unsigned long, VisibilityStatus) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_shiftStates
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_shiftControls
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_preparationStep
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acado_feedbackStep
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measurements
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_setup
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controls
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_setup
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_string
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[82]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[17d]"></a>measureOutput</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main_mpc.o(i.measureOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = measureOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__measureOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measurements
</UL>

<P><STRONG><a name="[17b]"></a>measurements</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, main_mpc.o(i.measurements))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = measurements &rArr; measureOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measureOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16f]"></a>set_control_value</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main_mpc.o(i.set_control_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = set_control_value &rArr; __setControlValue &rArr; HAL_DAC_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__setControlValue
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controls
</UL>

<P><STRONG><a name="[176]"></a>write_string</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, low_lvl_main.o(i.write_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_string &rArr; HAL_UART_Transmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetState
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[e0]"></a>MX_ADC3_Init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, low_lvl_main.o(i.MX_ADC3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_ADC3_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[e2]"></a>MX_DAC_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, low_lvl_main.o(i.MX_DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_DAC_Init &rArr; HAL_DAC_Init &rArr; HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_ConfigChannel
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[e4]"></a>MX_DMA_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, low_lvl_main.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[e5]"></a>MX_GPIO_Init</STRONG> (Thumb, 422 bytes, Stack size 32 bytes, low_lvl_main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[e7]"></a>MX_TIM2_Init</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, low_lvl_main.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_OC_Init &rArr; HAL_TIM_OC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[e9]"></a>MX_TIM5_Init</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, low_lvl_main.o(i.MX_TIM5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_TIM5_Init &rArr; HAL_TIM_OC_Init &rArr; HAL_TIM_OC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[ea]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, low_lvl_main.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[cf]"></a>TIM_OC5_SetConfig</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f7xx_hal_tim_ex.o(i.TIM_OC5_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC5_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[d0]"></a>TIM_OC6_SetConfig</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, stm32f7xx_hal_tim_ex.o(i.TIM_OC6_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC6_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[ab]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[aa]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[ac]"></a>DMA_SetConfig</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f7xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[b3]"></a>NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[b4]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[70]"></a>ADC_DMAConvCplt</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f7xx_hal_adc.o(i.ADC_DMAConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DMAConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[72]"></a>ADC_DMAError</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32f7xx_hal_adc.o(i.ADC_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[71]"></a>ADC_DMAHalfConvCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f7xx_hal_adc.o(i.ADC_DMAHalfConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DMAHalfConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[9f]"></a>ADC_Init</STRONG> (Thumb, 362 bytes, Stack size 0 bytes, stm32f7xx_hal_adc.o(i.ADC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[73]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[d5]"></a>UART_EndRxTransfer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>UART_Receive_IT</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>UART_Transmit_IT</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[77]"></a>__sti___19_MessageHandling_cpp_402fe4a4</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, messagehandling.o(i.__sti___19_MessageHandling_cpp_402fe4a4))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = __sti___19_MessageHandling_cpp_402fe4a4 &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageHandling::MessageHandling(int*, VisibilityStatus, VisibilityStatus, VisibilityStatus)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messagehandling.o(.init_array)
</UL>
<P><STRONG><a name="[13f]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[13a]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[141]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[140]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[75]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
