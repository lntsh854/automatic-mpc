#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <math.h>
#include <sys/time.h>
#include "misc.h"
#include "stm32f4xx_conf.h"
#include "stm32f4xx_it.h"
#include "stm32f4xx.h"

#define VAL_MAX 0x0FFF
#define VAL_MIN 0x0000
#define PRECISION 40.95f
/*STM32 Code*/
#define LEDG 0
#define LEDO 1
#define LEDR 2
#define LEDB 3

#define BUT0 0
#define BUT1 1
#define BUT2 2
#define BUT3 3
#define BUT4 4
__IO uint32_t TimingDelay = 0;
__IO uint32_t timer = 0;
volatile char str[1000];
volatile char * usart_str;
volatile int str_len = 0;

void Delay(__IO uint32_t nTime){ TimingDelay = nTime; while(TimingDelay != 0); }
void SysTick_Handler(void){ ++timer; if (TimingDelay != 0x00) --TimingDelay; }

uint32_t led2pin(int l){
    switch(l){
        case LEDG: return GPIO_Pin_12;
        case LEDO: return GPIO_Pin_13;
        case LEDR: return GPIO_Pin_14;
        case LEDB: return GPIO_Pin_15;
    }
    return GPIO_Pin_12;
}
uint32_t but2pin(int l){
    switch(l){
        case BUT1: return GPIO_Pin_1;
        case BUT2: return GPIO_Pin_2;
        case BUT3: return GPIO_Pin_3;
        case BUT4: return GPIO_Pin_4;
    }
    return GPIO_Pin_1;
}

void ledOn    (int l){ GPIO_SetBits(GPIOD, led2pin(l)); }
void ledOff   (int l){ GPIO_ResetBits(GPIOD, led2pin(l)); }
void ledToggle(int l){ GPIO_ToggleBits(GPIOD, led2pin(l)); }
void ledsSpin(){
    static int i = 0;
    int k = 0;
    for(k=0; k<4; ++k) ledOff(k);
    ledOn(i);
    i = (i+1)%4;
}
int readButton(int b){ 
    if(b==BUT0) return GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0); 
    else        return GPIO_ReadInputDataBit(GPIOD, but2pin(b));
}

void UsartInit(){
    USART_InitTypeDef USART_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    // USART 6
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);

    NVIC_InitStructure.NVIC_IRQChannel = USART6_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);

    GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_USART6);
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    

    USART_InitStructure.USART_BaudRate = 115200;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Tx;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_Init(USART6, &USART_InitStructure);
    USART_ITConfig(USART6, USART_IT_TXE, DISABLE);
    USART_Cmd(USART6, ENABLE);
}

void USART6_IRQHandler( void ){
    if(USART_GetITStatus(USART6, USART_IT_TXE) != RESET){
        if(*usart_str){
            USART_SendData(USART6, *usart_str++);
        }else{
            USART_ITConfig(USART6, USART_IT_TXE, DISABLE);
            usart_str = NULL;
        }
    }
}

void TIM3_IRQHandler(void){
    if(TIM_GetITStatus(TIM3,TIM_IT_Update) != RESET){
        TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
        timer_loop();
    }
}

void TimerInit(void){
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    /* TIM3 clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);

    /* Enable the TIM3 gloabal Interrupt */
    NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);
    // NVIC_SetPriorityGrouping(2);
    NVIC_SetPriority(TIM3_IRQn, 1);
 
    // PrescalerValue = (uint16_t) ((SystemCoreClock / 2) / 65536) - 1;
    TIM_TimeBaseStructure.TIM_Period = 20000 - 1;
    TIM_TimeBaseStructure.TIM_Prescaler = 4200 - 1;
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
    /* TIM Interrupts enable */
    TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
    /* TIM3 enable counter */
    TIM_Cmd(TIM3, ENABLE);
}

void ClkInit(){
    SystemCoreClockUpdate();                                // Update system clock (needed to obtain SystemCoreClock)
    SysTick_Config(SystemCoreClock / 1000000);              // Enable SysTick
}

void LedInit(){
    /* Configure the GPIO_LED pin */
    GPIO_InitTypeDef GPIO_InitStructure;
    
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);   // Enable the GPIO_LED Clock
    GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    ledOff(LEDO);
    ledOff(LEDR);
    ledOff(LEDG);
    ledOff(LEDB);
}

void ButtonsInit(){
    GPIO_InitTypeDef GPIO_InitStructure;
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOD, ENABLE);
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1|GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_6;
    GPIO_Init(GPIOD, &GPIO_InitStructure);
}

void DACInit(){
    GPIO_InitTypeDef GPIO_InitStructure;
    DAC_InitTypeDef  DAC_InitStructure;

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
    GPIO_Init(GPIOA, &GPIO_InitStructure);

   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
	GPIO_Init(GPIOA, &GPIO_InitStructure);


    DAC_DeInit();

    DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
    DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
    DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
    DAC_Init(DAC_Channel_1, &DAC_InitStructure);
    DAC_Cmd(DAC_Channel_1, ENABLE);
    DAC_Init(DAC_Channel_2, &DAC_InitStructure);
    DAC_Cmd(DAC_Channel_2, ENABLE);
}

void ADCInit(){
  ADC_InitTypeDef       ADC_InitStructure;
  ADC_CommonInitTypeDef ADC_CommonInitStructure;
  GPIO_InitTypeDef      GPIO_InitStructure;

  /* Enable ADC3, DMA2 and GPIO clocks ****************************************/
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC3, ENABLE);

  /* Configure ADC3 Channel12 pin as analog input ******************************/
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(GPIOC, &GPIO_InitStructure);

  ADC_DeInit();

  /* ADC Common Init **********************************************************/
  ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
  ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
  ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
  ADC_CommonInit(&ADC_CommonInitStructure);

  /* ADC3 Init ****************************************************************/
  ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
  ADC_InitStructure.ADC_ScanConvMode = DISABLE;
  ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
  ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
  ADC_InitStructure.ADC_ExternalTrigConv = 0;
  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
  ADC_InitStructure.ADC_NbrOfConversion = 1;
  ADC_Init(ADC3, &ADC_InitStructure);

  /* ADC3 regular channel12 configuration *************************************/
  ADC_RegularChannelConfig(ADC3, ADC_Channel_12, 1, ADC_SampleTime_3Cycles);

  /* Enable ADC3 */
  ADC_Cmd(ADC3, ENABLE);
}

void FpuInit(void){
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
}

void initialize(){
    ClkInit();
    ADCInit();
    DACInit();
    LedInit();  
    ButtonsInit();
    UsartInit();
    FpuInit();
    TimerInit();
}

void write_string(char * s){
    usart_str = s;
    USART_ITConfig(USART6, USART_IT_TXE, ENABLE);
    while(usart_str){;}
    memset(s, 0, strlen(s));
}

char tmpstr[100];
char * float2str(float x){
    int sign = 1; // plus
    if(x < 0) sign = -1;
    x = x*sign; // remove sign

    int integer = (int)(x);
    int fractional = (int)( (x-integer)*10000 );
    if(sign > 0){
        sprintf(tmpstr, " %d.%04d",integer, fractional);
    } else {
        sprintf(tmpstr, "-%d.%04d",integer, fractional);
    }
    return tmpstr;
}

long get_time(){
    return timer;
}

uint16_t __measureOutput(){
    uint16_t value = 0;
    ADC_SoftwareStartConv(ADC3);
    while(ADC_GetFlagStatus(ADC3, ADC_FLAG_EOC) == RESET);
    value = (uint16_t)ADC_GetConversionValue(ADC3);
    return value;
}

float measureOutput(){
    return ((float)__measureOutput())/51.2f + 10.0f;
}

#define MAX_VAL 4095
void __setControlValue(uint16_t value){
    DAC_SetChannel1Data(DAC_Align_12b_R, value);
    DAC_SetChannel2Data(DAC_Align_12b_R, MAX_VAL - value);
}

void setControlValue(float value){
    __setControlValue((uint16_t)(value*PRECISION));
}

void hardware_setup(){
    #MPC_PROFILER_BEGIN 1
    initialize();
    #MPC_PROFILER_END 1
}

//////////////////////////////////////////////////// TUTAJ ZACZYNA SIE ROBOTA SPECJALISTY MATLAB
#MPC_BEGIN
global MPC_CROSSCOMPILER

%% PID parameters
Kk = 75;
Tk = 20;
pid_par = [45.0, 10.0, 2.5, 1.0]; % K, Ti, Td, T
pid_par = [Kk*0.45, Tk/1.2, nan, 1.0]; % K, Ti, Td, T

%% DMC parameters
odpowiedz = [40.180000,40.180000,40.250000,40.250000,40.310000,40.370000,40.500000,40.620000,40.750000,40.870000,41.060000,41.180000,41.310000,41.500000,41.620000,41.750000,41.930000,41.930000,42.120000,42.250000,42.370000,42.560000,42.680000,42.870000,43.000000,43.180000,43.310000,43.430000,43.620000,43.810000,44.000000,44.000000,44.180000,44.370000,44.560000,44.750000,44.930000,45.120000,45.310000,45.500000,45.620000,45.810000,45.930000,46.060000,46.250000,46.250000,46.370000,46.500000,46.680000,46.810000,47.000000,47.120000,47.250000,47.430000,47.620000,47.750000,47.870000,48.000000,48.120000,48.120000,48.310000,48.500000,48.620000,48.810000,49.000000,49.180000,49.370000,49.560000,49.680000,49.810000,50.000000,50.120000,50.310000,50.310000,50.430000,50.560000,50.680000,50.810000,50.930000,51.060000,51.180000,51.310000,51.430000,51.560000,51.680000,51.810000,51.930000,51.930000,52.120000,52.250000,52.310000,52.430000,52.560000,52.680000,52.810000,52.870000,53.000000,53.120000,53.180000,53.310000,53.430000,53.500000,53.500000,53.620000,53.680000,53.810000,53.870000,54.000000,54.120000,54.250000,54.310000,54.430000,54.500000,54.560000,54.620000,54.620000,54.750000,54.810000,54.870000,54.930000,55.000000,55.060000,55.120000,55.180000,55.250000,55.310000,55.370000,55.430000,55.500000,55.500000,55.560000,55.620000,55.750000,55.810000,55.870000,55.930000,56.060000,56.120000,56.180000,56.310000,56.370000,56.430000,56.500000,56.500000,56.560000,56.680000,56.680000,56.750000,56.810000,56.870000,56.930000,57.000000,57.060000,57.120000,57.180000,57.310000,57.310000,57.310000,57.370000,57.430000,57.500000,57.560000,57.560000,57.620000,57.680000,57.750000,57.750000,57.870000,57.870000,57.930000,57.930000,57.930000,58.000000,58.000000,58.000000,58.060000,58.060000,58.120000,58.180000,58.250000,58.310000,58.310000,58.310000,58.370000,58.430000,58.430000,58.500000,58.500000,58.500000,58.560000,58.560000,58.560000,58.620000,58.620000,58.620000,58.680000,58.680000,58.680000,58.680000,58.680000,58.750000,58.810000,58.870000,58.930000,59.000000,59.120000,59.120000,59.180000,59.250000,59.310000,59.310000,59.310000,59.310000,59.310000,59.370000,59.370000,59.370000,59.370000,59.430000,59.500000,59.500000,59.620000,59.620000,59.680000,59.750000,59.750000,59.810000,59.810000,59.810000,59.870000,59.870000,59.810000,59.810000,59.810000,59.750000,59.750000,59.750000,59.680000,59.680000,59.750000,59.750000,59.750000,59.750000,59.750000,59.810000,59.810000,59.810000,59.810000,59.870000,59.870000,59.810000,59.810000,59.870000,59.870000,59.870000,59.870000,59.870000,59.870000,59.870000,59.930000,59.930000,59.930000,59.930000,60.000000,60.000000,60.000000,60.000000,60.060000,60.060000,60.060000,60.120000,60.120000,60.180000,60.250000,60.310000,60.310000,60.370000,60.370000,60.370000,60.370000,60.370000,60.430000,60.430000,60.430000,60.430000,60.430000,60.430000,60.430000,60.430000,60.500000,60.500000,60.560000,60.560000,60.620000,60.680000,60.680000,60.680000,60.680000,60.750000,60.750000,60.680000,60.680000,60.680000,60.680000,60.680000,60.680000,60.680000,60.680000,60.750000,60.810000,60.870000,60.870000,60.930000,61.000000,61.000000,61.000000,61.000000,61.000000,61.000000,61.000000,61.000000,61.000000,61.000000,61.000000,61.000000,61.000000,61.060000,61.060000,61.120000,61.180000,61.180000,61.250000,61.180000,61.250000,61.180000,61.180000,61.120000,61.180000,61.120000,61.120000,61.120000,61.120000,61.120000,61.120000,61.120000,61.120000,61.120000,61.120000,61.180000,61.180000,61.180000,61.250000,61.250000,61.250000,61.310000,61.370000,61.310000,61.310000,61.370000,61.370000,61.430000,61.430000,61.430000,61.430000,61.430000,61.500000,61.500000,61.500000,61.500000,61.500000,61.500000,61.560000,61.500000,61.560000,61.560000,61.500000,61.500000,61.500000,61.500000,61.500000,61.430000,61.430000,61.430000,61.430000,61.430000,61.430000,61.430000,61.500000,61.500000,61.560000,61.560000,61.560000,61.560000,61.560000,61.560000,61.560000];
D = 150;
S = (odpowiedz((1:D)+2)-odpowiedz(1))/25;
N  = 20;
Nu =  15;
lambda = 0.1;

%% Code generation
if(MPC_CROSSCOMPILER == 1)
    generate(PID(pid_par),'PID');
    generate(DMC_analitic(S,N,Nu,lambda,[],[],[],[]),'DMC');
    return;
end

%% Optional simulation
fprintf('Tutaj mozna przeprowadzic symulacje...\n');
#MPC_END

//////////////////////////////////////////////////// TUTAJ ZACZYNA SIE ROBOTA UZYTKOWNIKA KONCOWEGO
enum {ALG_PID, ALG_DMC};
volatile int algorithm = ALG_PID;

ArchiveData ad;
CurrentControl cc;

void measurements(){
    #MPC_PROFILER_BEGIN 4
    new_output(&ad,measureOutput());
    #MPC_PROFILER_END 4
}

void controller_setup(){
    #MPC_PROFILER_BEGIN 2
    init_archive_data(&ad, 400, 400, 0, 0, 40.0);
    get_time();
    PID(NULL,NULL);
    DMC(NULL,NULL);
    #MPC_PROFILER_END 2
}

void idle(){
    #MPC_PROFILER_BEGIN 13
    // Komunikacja z komputerem zbierającym dane 
    sprintf(str, "%d,%s,"  , algorithm, float2str(ad.yk[M(0)]));
    write_string(str);
    sprintf(str,       "%s,", float2str(ad.yzad));
    write_string(str);
    sprintf(str,          "%s;\n", float2str(ad.uk1[M(-1)]));
    write_string(str);

    if(readButton(BUT0)) algorithm = ALG_PID;
    else                 algorithm = ALG_DMC;

    if(readButton(BUT1)) ad.yzad = 40.0;
    if(readButton(BUT2)) ad.yzad = 50.0;
    if(readButton(BUT3)) ad.yzad = 60.0;
    
    if(readButton(BUT4)) while(1);
    #MPC_PROFILER_END 13
}

void loop(){
    if(algorithm == ALG_PID){
        #MPC_PROFILER_BEGIN 10
        PID(&ad,&cc);
        #MPC_PROFILER_END 10
    }
    if(algorithm == ALG_DMC) {
        #MPC_PROFILER_BEGIN 11
        DMC(&ad,&cc);
        #MPC_PROFILER_END 11
    }
    ledsSpin();
}

void controls(){
    #MPC_PROFILER_BEGIN 3
    pushCurrentControlsToArchiveData(&cc,&ad);
    projectOnFeasibleSet(&ad, NAN, NAN, 0.0, 100.0);
    setControlValue(last_control(&ad));
    #MPC_PROFILER_END 3
}

void timeout(){
    // Zapal diode czerwona
    ledOn(LEDR);
    // Wystaw zerowe sterowanie
    setControlValue(0.0);
    // Wyswietl wyniki dzialania profilera
    print_profiler();
    sprintf(str,"\n");
    write_string(str);
    // Wejdz w petle nieskonczona
    while(1);
}
