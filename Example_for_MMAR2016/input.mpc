#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <math.h>
#include <sys/time.h>
#include "misc.h"
#include "stm32f4xx_conf.h"
#include "stm32f4xx_it.h"
#include "stm32f4xx.h"

#define VAL_MAX 0x0FFF
#define VAL_MIN 0x0000
#define PRECISION 1000.0f
/*STM32 Code*/
#define LEDG 0
#define LEDO 1
#define LEDR 2
#define LEDB 3

#define BUT0 0
#define BUT1 1
#define BUT2 2
#define BUT3 3
#define BUT4 4
__IO uint32_t TimingDelay = 0;
__IO uint32_t timer = 0;
volatile char str[1000];
volatile char * usart_str;
volatile int str_len = 0;

void Delay(__IO uint32_t nTime){ TimingDelay = nTime; while(TimingDelay != 0); }
void SysTick_Handler(void){ ++timer; if (TimingDelay != 0x00) --TimingDelay; }

uint32_t led2pin(int l){
    switch(l){
        case LEDG: return GPIO_Pin_12;
        case LEDO: return GPIO_Pin_13;
        case LEDR: return GPIO_Pin_14;
        case LEDB: return GPIO_Pin_15;
    }
    return GPIO_Pin_12;
}
uint32_t but2pin(int l){
    switch(l){
        case BUT1: return GPIO_Pin_1;
        case BUT2: return GPIO_Pin_2;
        case BUT3: return GPIO_Pin_3;
        case BUT4: return GPIO_Pin_4;
    }
    return GPIO_Pin_1;
}

void ledOn    (int l){ GPIO_SetBits(GPIOD, led2pin(l)); }
void ledOff   (int l){ GPIO_ResetBits(GPIOD, led2pin(l)); }
void ledToggle(int l){ GPIO_ToggleBits(GPIOD, led2pin(l)); }
void ledsSpin(){
    static int i = 0;
    int k = 0;
    for(k=0; k<4; ++k) ledOff(k);
    ledOn(i);
    i = (i+1)%4;
}
int readButton(int b){ 
    if(b==BUT0) return GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0); 
    else        return GPIO_ReadInputDataBit(GPIOD, but2pin(b));
}

void UsartInit(){
    USART_InitTypeDef USART_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    // USART 6
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);

    NVIC_InitStructure.NVIC_IRQChannel = USART6_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);

    GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_USART6);
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    

    USART_InitStructure.USART_BaudRate = 115200;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Tx;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_Init(USART6, &USART_InitStructure);
    USART_ITConfig(USART6, USART_IT_TXE, DISABLE);
    USART_Cmd(USART6, ENABLE);
}

void USART6_IRQHandler( void ){
    if(USART_GetITStatus(USART6, USART_IT_TXE) != RESET){
        if(*usart_str){
            USART_SendData(USART6, *usart_str++);
        }else{
            USART_ITConfig(USART6, USART_IT_TXE, DISABLE);
            usart_str = NULL;
        }
    }
}

void TIM3_IRQHandler(void){
    if(TIM_GetITStatus(TIM3,TIM_IT_Update) != RESET){
        TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
        timer_loop();
    }
}

void TimerInit(void){
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    /* TIM3 clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);

    /* Enable the TIM3 gloabal Interrupt */
    NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);
    // NVIC_SetPriorityGrouping(2);
    NVIC_SetPriority(TIM3_IRQn, 1);
 
    // PrescalerValue = (uint16_t) ((SystemCoreClock / 2) / 65536) - 1;
    TIM_TimeBaseStructure.TIM_Period = 2000 - 1;
    TIM_TimeBaseStructure.TIM_Prescaler = 4200 - 1;
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
    /* TIM Interrupts enable */
    TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
    /* TIM3 enable counter */
    TIM_Cmd(TIM3, ENABLE);
}

void ClkInit(){
    SystemCoreClockUpdate();                                // Update system clock (needed to obtain SystemCoreClock)
    SysTick_Config(SystemCoreClock / 1000000);                 // Enable SysTick
}

void LedInit(){
    /* Configure the GPIO_LED pin */
    GPIO_InitTypeDef GPIO_InitStructure;
    
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);   // Enable the GPIO_LED Clock
    GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    ledOff(LEDO);
    ledOff(LEDR);
    ledOff(LEDG);
    ledOff(LEDB);
}

void ButtonsInit(){
    GPIO_InitTypeDef GPIO_InitStructure;
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOD, ENABLE);
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1|GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_6;
    GPIO_Init(GPIOD, &GPIO_InitStructure);
}

void DACInit(){
    GPIO_InitTypeDef GPIO_InitStructure;
    DAC_InitTypeDef  DAC_InitStructure;

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    DAC_DeInit();

    DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
    DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
    DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
    DAC_Init(DAC_Channel_1, &DAC_InitStructure);
    DAC_Cmd(DAC_Channel_1, ENABLE);
}

void ADCInit(){
  ADC_InitTypeDef       ADC_InitStructure;
  ADC_CommonInitTypeDef ADC_CommonInitStructure;
  GPIO_InitTypeDef      GPIO_InitStructure;

  /* Enable ADC3, DMA2 and GPIO clocks ****************************************/
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC3, ENABLE);

  /* Configure ADC3 Channel12 pin as analog input ******************************/
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(GPIOC, &GPIO_InitStructure);

  ADC_DeInit();

  /* ADC Common Init **********************************************************/
  ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
  ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
  ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
  ADC_CommonInit(&ADC_CommonInitStructure);

  /* ADC3 Init ****************************************************************/
  ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
  ADC_InitStructure.ADC_ScanConvMode = DISABLE;
  ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
  ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
  ADC_InitStructure.ADC_ExternalTrigConv = 0;
  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
  ADC_InitStructure.ADC_NbrOfConversion = 1;
  ADC_Init(ADC3, &ADC_InitStructure);

  /* ADC3 regular channel12 configuration *************************************/
  ADC_RegularChannelConfig(ADC3, ADC_Channel_12, 1, ADC_SampleTime_3Cycles);

  /* Enable ADC3 */
  ADC_Cmd(ADC3, ENABLE);
}

void FpuInit(void){
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
}

void initialize(){
    ClkInit();
    ADCInit();
    DACInit();
    LedInit();  
    ButtonsInit();
    UsartInit();
    FpuInit();
    TimerInit();
}

void write_string(char * s){
    usart_str = s;
    USART_ITConfig(USART6, USART_IT_TXE, ENABLE);
    while(usart_str){;}
    memset(s, 0, strlen(s));
}

char tmpstr[100];
char * float2str(float x){
    int sign = 1; // plus
    if(x < 0) sign = -1;
    x = x*sign; // remove sign

    int integer = (int)(x);
    int fractional = (int)( (x-integer)*10000 );
    if(sign > 0){
        sprintf(tmpstr, " %d.%04d",integer, fractional);
    } else {
        sprintf(tmpstr, "-%d.%04d",integer, fractional);
    }
    return tmpstr;
}

long get_time(){
    return timer;
}

uint16_t __measureOutput(){
    uint16_t value = 0;
    ADC_SoftwareStartConv(ADC3);
    while(ADC_GetFlagStatus(ADC3, ADC_FLAG_EOC) == RESET);
    value = (uint16_t)ADC_GetConversionValue(ADC3);
    return value;
}

float measureOutput(){
    return ((float)__measureOutput())/PRECISION;
}

void __setControlValue(uint16_t value){
    DAC_SetChannel1Data(DAC_Align_12b_R, value);
}

void setControlValue(float value){
    __setControlValue((uint16_t)(value*PRECISION));
}

void hardware_setup(){
    #MPC_PROFILER_BEGIN 1
    initialize();
    #MPC_PROFILER_END 1
}

//////////////////////////////////////////////////// TUTAJ ZACZYNA SIE ROBOTA SPECJALISTY MATLAB
#MPC_BEGIN
global MPC_CROSSCOMPILER

%% PID parameters
pid_par = [4.5, 0.5, 0, 0.1]; % K, Ti, Td, T

%% DMC parameters
S = [0.000000, 0.002850, 0.104350, 0.195050, 0.276700, 0.350850, 0.416400, 0.476600, 0.530850, 0.579850, 0.620950, 0.660950, 0.696500, 0.727700, 0.756100, 0.782750, 0.804350, 0.826200, 0.845150, 0.860250, 0.875450, 0.890200, 0.902600, 0.912050, 0.921800, 0.932150, 0.941700, 0.948400, 0.953150, 0.959150, 0.965250, 0.971150, 0.973350, 0.979900, 0.980800, 0.985250, 0.987150, 0.990300, 0.993550, 0.994850, 0.996050, 0.997900, 0.998450, 1.000400, 1.001550, 1.005350, 1.004350, 1.004650, 1.007650, 1.007500, 1.007200, 1.007700, 1.007700, 1.010350, 1.010700, 1.009250, 1.008550, 1.011900, 1.011300, 1.009950, 1.010750, 1.011450, 1.009900, 1.010950, 1.011150, 1.012250, 1.012300, 1.011650, 1.011300, 1.013250, 1.013750, 1.013100, 1.011500, 1.011650, 1.011800, 1.012750, 1.012100, 1.013100, 1.013900, 1.012250, 1.013200, 1.013350, 1.013250, 1.013500, 1.014500, 1.012100, 1.013150, 1.014050, 1.012250, 1.012600, 1.013100, 1.013200, 1.013150, 1.013800, 1.012600, 1.013400, 1.012900, 1.012650, 1.012500, 1.013750];
S = [0.002850, 0.104350, 0.195050, 0.276700, 0.350850, 0.416400, 0.476600, 0.530850, 0.579850, 0.620950, 0.660950, 0.696500, 0.727700, 0.756100, 0.782750, 0.804350, 0.826200, 0.845150, 0.860250, 0.875450, 0.890200, 0.902600, 0.912050, 0.921800, 0.932150, 0.941700, 0.948400, 0.953150, 0.959150, 0.965250, 0.971150, 0.973350, 0.979900, 0.980800, 0.985250, 0.987150, 0.990300, 0.993550, 0.994850, 0.996050, 0.997900, 0.998450, 1.000400, 1.001550, 1.005350, 1.004350, 1.004650, 1.007650, 1.007500, 1.007200, 1.007700, 1.007700, 1.010350, 1.010700, 1.009250, 1.008550, 1.011900, 1.011300, 1.009950, 1.010750, 1.011450, 1.009900, 1.010950, 1.011150, 1.012250, 1.012300, 1.011650, 1.011300, 1.013250, 1.013750, 1.013100, 1.011500, 1.011650, 1.011800, 1.012750, 1.012100, 1.013100, 1.013900, 1.012250, 1.013200, 1.013350, 1.013250, 1.013500, 1.014500, 1.012100, 1.013150, 1.014050, 1.012250, 1.012600, 1.013100, 1.013200, 1.013150, 1.013800, 1.012600, 1.013400, 1.012900, 1.012650, 1.012500, 1.013750];
N  = 10;
Nu =  5;
lambda = 1;

%% Code generation
if(MPC_CROSSCOMPILER == 1)
    generate(PID(pid_par),'PID');
    generate(DMC_analitic(S,N,Nu,lambda,[],[],[],[]),'DMC_analitic');
    return;
end

%% Optional simulation
fprintf('Tutaj mozna przeprowadzic symulacje...\n');
#MPC_END

//////////////////////////////////////////////////// TUTAJ ZACZYNA SIE ROBOTA UZYTKOWNIKA KONCOWEGO
enum {ALG_PID, ALG_DMC_ANALITIC};
volatile int algorithm = ALG_PID;

ArchiveData ad;
CurrentControl cc;

void measurements(){
    #MPC_PROFILER_BEGIN 4
    new_output(&ad,measureOutput());
    #MPC_PROFILER_END 4
}

void controller_setup(){
    #MPC_PROFILER_BEGIN 2
    init_archive_data(&ad, 200, 200, 0, 0, 1.0);
    get_time();
    PID(NULL,NULL);
    DMC_analitic(NULL,NULL);
    #MPC_PROFILER_END 2
}

void idle(){
    #MPC_PROFILER_BEGIN 13
    // Komunikacja z komputerem zbierającym dane 
    sprintf(str, "%d,%s,"  , algorithm, float2str(ad.yk[M(0)]));
    write_string(str);
    sprintf(str,       "%s,", float2str(ad.yzad));
    write_string(str);
    sprintf(str,          "%s;\n", float2str(ad.uk1[M(-1)]));
    write_string(str);

    if(readButton(BUT0)) algorithm = ALG_PID;
    else                 algorithm = ALG_DMC_ANALITIC;

    if(readButton(BUT1)) ad.yzad = 1.0;
    if(readButton(BUT2)) ad.yzad = 2.0;
    if(readButton(BUT3)) ad.yzad = 3.0;
    
    if(readButton(BUT4)) while(1);
    #MPC_PROFILER_END 13
}

void loop(){
    if(algorithm == ALG_PID){
        #MPC_PROFILER_BEGIN 10
        PID(&ad,&cc);
        #MPC_PROFILER_END 10
    }
    if(algorithm == ALG_DMC_ANALITIC) {
        #MPC_PROFILER_BEGIN 11
        DMC_analitic(&ad,&cc);
        #MPC_PROFILER_END 11
    }
    ledsSpin();
}

void controls(){
    #MPC_PROFILER_BEGIN 3
    pushCurrentControlsToArchiveData(&cc,&ad);
    projectOnFeasibleSet(&ad, -1.0,1.0, 0.0, 4.0);
    setControlValue(last_control(&ad));
    #MPC_PROFILER_END 3
}

void timeout(){
    // Zapal diode czerwona
    ledOn(LEDR);
    // Wystaw zerowe sterowanie
    setControlValue(0.0);
    // Wyswietl wyniki dzialania profilera
    print_profiler();
    sprintf(str,"\n");
    write_string(str);
    // Wejdz w petle nieskonczona
    while(1);
}
