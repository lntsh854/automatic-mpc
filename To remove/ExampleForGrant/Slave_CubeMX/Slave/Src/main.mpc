#include "stm32f7xx_hal.h"
#include <string.h>
#include "low_lvl_main.h"
#include "obl_macierzowe.h"
#include "mat_lib.h"
#include "alokacja_nr.h"
#include "pk.h"

#define __FUN_WRITE() {write_string((char*)__func__);write_string((char*)"\r\n");}while(0)

char str[100];

int setpoint = 0;

extern ADC_HandleTypeDef hadc3;
extern DMA_HandleTypeDef hdma_adc3;

extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim5;

extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart6;

extern void timer_loop(void);
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
    if(GPIO_Pin == SYNC_Pin){ // signal from MASTER
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
        timer_loop();
    } else if(GPIO_Pin == USER_Pin){ // button pressed
    } else if(GPIO_Pin == SETPOINT_Pin){
        if(HAL_GPIO_ReadPin(SETPOINT_GPIO_Port,SETPOINT_Pin) == GPIO_PIN_SET) 
            setpoint = 1;
        else
            setpoint = 0;
    }
}

long get_time(){
    return HAL_GetTick();
}

float* measureOutput(){
    return __measureOutput(); // values from -1 to 1
}

void proposeControlValue(float value){ // values from -1 to 1
    static float control_values[1]={0};
    control_values[0] = value;
    __setControlValue(control_values);
}

void hardware_setup(){
    #MPC_PROFILER_BEGIN 1
    low_lvl_main();
    if(HAL_GPIO_ReadPin(SETPOINT_GPIO_Port, SETPOINT_Pin) == GPIO_PIN_SET) setpoint = 1;
    else                                                                   setpoint = 0;
    #MPC_PROFILER_END 1
}

void string_spin(){
    static int ind = 0;
    static char txt[3] = "?\r\0";
    // static char stages[4] = {'\\','|','/','-'}; int ssize = 4;
    static char stages[5] = {' ','_','o','O','o'}; int ssize = 5;
    txt[0] = stages[ind];
    write_string(txt);
    ind = (ind+1)%ssize;
}

void printMat(float ** A, long x, long y, const char * fmat){
    long i = 1;
    long j = 1;
    for(i=1; i<=x; ++i){
        if(i==1) write_string("[");
        else     write_string(" ");
        for(j=1; j<=y; ++j){
            sprintf(str,fmat,A[i][j]);
            write_string(str);
            if(j==y && i!=x) write_string(";\n\r");
            if(j!=y) write_string(",");
        }
        if(i==x) write_string("]\n\r");
    }
}

void printVec(float * A, long x, const char * fmat){
    long i = 1;
    write_string("[");
    for(i=1; i<=x; ++i){
        if(i!=1) write_string(" ");
        sprintf(str,fmat,A[i]);
        write_string(str);
        if(i!=x) write_string(";\n\r");
    }
    write_string("]\n\r");
}
//////////////////////////////////////////////////// TUTAJ ZACZYNA SIE ROBOTA SPECJALISTY MATLAB
#MPC_BEGIN
global MPC_CROSSCOMPILER
% Obiekt rzeczywisty -- 2xRC
%S(1,1,:)=[0.1784, 0.3805, 0.5334, 0.6467, 0.7305, 0.7926, 0.8385, 0.8724, 0.8975, 0.9161, 0.9299, 0.9401, 0.9476, 0.9532, 0.9573, 0.9603, 0.9626, 0.9643, 0.9655, 0.9664, 0.9671, 0.9676, 0.9679]; % Tp = 0.1
S(1,1,:)=[0.3805, 0.6467, 0.7926, 0.8724, 0.9161, 0.9401, 0.9532, 0.9603, 0.9643, 0.9664]; % Tp = 0.2
a(1,:) = [-7.875594597027e-01,+3.526926067685e-02]; % Tp = 0.1?
b(1,1,:) = [+1.783577301464e-01,+6.167306699759e-02]; % Tp = 0.1?


%% Code generation
if(MPC_CROSSCOMPILER == 1)
    %% DMC 
    % generate(DMC_MIMO_A(S,10,5,1,1,[],[],-1,1),'CONTROLLER');
    % generate(DMC_MIMO_N(S,10,5,1,1,[],[],-1,1),'CONTROLLER_N');
    %% GPC
    generate(GPC_MIMO_A(a,b,20,5,10,1,[],[],-1, 1),'CONTROLLER');
    generate(GPC_MIMO_N(a,b,20,5,10,1,[],[],-1, 1),'CONTROLLER_N');
    % generate(Constant([-1 -1]),'CONTROLLER');
    return;
end

%% Optional simulation
fprintf('Tutaj mozna przeprowadzic symulacje...\n');
#MPC_END

//////////////////////////////////////////////////// TUTAJ ZACZYNA SIE ROBOTA UZYTKOWNIKA KONCOWEGO
ArchiveData ad;
CurrentControl cc;

void measurements(){
    #MPC_PROFILER_BEGIN 4
    new_output(&ad,measureOutput());
    #MPC_PROFILER_END 4
}

void controller_setup(){
    #MPC_PROFILER_BEGIN 2
    init_archive_data(&ad, 100, 100, 1, 1, 0, 0, 0.01);
    init_current_control(&cc,&ad);
    get_time();
    CONTROLLER(NULL,NULL);
    CONTROLLER_N(NULL,NULL);
    #MPC_PROFILER_END 2
}

void idle(){
    #MPC_PROFILER_BEGIN 13
    const int k = 0;
    // Komunikacja z komputerem zbierajÄ…cym dane 
    // sprintf(str, "y=[%8.4f,%8.4f];z=[%8.4f,%8.4f];u=[%8.4f,%8.4f];\n\r", ad.y[k][0],ad.y[k][1],ad.z[0],ad.z[1],ad.u[k-1][0],ad.u[k-1][1]);
    sprintf(str, "y=%8.4f;z=%8.4f;u=%8.4f;\n\r", ad.y[k][0],ad.z[0],ad.u[k-1][0]);
    write_string(str);
    #MPC_PROFILER_END 13
    //HAL_Delay(1000);
}

void loop(){
    #MPC_PROFILER_BEGIN 10
    if(setpoint == 0) ad.z[0]  = -0.5;
    else              ad.z[0]  = +0.5;
    CONTROLLER(&ad,&cc);

    // static float du[1] = {0};
    // if(i++<500) du[0] = 0.0f;
    // else      du[0] = 1.0f;
    // setCurrentControl(&cc,du);
    #MPC_PROFILER_END 10
    // string_spin();
}

void controls(){
    const int k = 0;
    #MPC_PROFILER_BEGIN 3
    proposeControlValue(cc.du[0]+ad.u[k-1][0]);
    setCurrentControl(&cc,__getMasterControlValue());
    pushCurrentControlsToArchiveData(&cc,&ad);
    //projectOnFeasibleSet(&ad, NAN, NAN, 0.0, 1.0);

    #MPC_PROFILER_END 3
}

void timeout(){
    //setControlValue(0.0);
    // while(1);
}

// zups
