<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [SingleController\SingleController.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image SingleController\SingleController.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Fri Jun 14 15:29:39 2019
<BR><P>
<H3>Maximum Stack Usage =       1520 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; main_interrupt &rArr; __loop &rArr; loop &rArr; controller &rArr; osqp_solve &rArr; polish &rArr; init_linsys_solver &rArr; init_linsys_solver_qdldl &rArr; permute_KKT &rArr; amd_l_order &rArr; amd_l1 &rArr; amd_l2 &rArr; amd_l_postorder &rArr; amd_l_post_tree
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">CAN1_RX0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[6e]">ADC_DMAConvCplt</a> from stm32f7xx_hal_adc.o(i.ADC_DMAConvCplt) referenced from stm32f7xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[70]">ADC_DMAError</a> from stm32f7xx_hal_adc.o(i.ADC_DMAError) referenced from stm32f7xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[6f]">ADC_DMAHalfConvCplt</a> from stm32f7xx_hal_adc.o(i.ADC_DMAHalfConvCplt) referenced from stm32f7xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[1c]">ADC_IRQHandler</a> from stm32f7xx_it.o(i.ADC_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f7xx_it.o(i.BusFault_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[67]">CEC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[63]">DMA2D_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from stm32f7xx_it.o(i.DMA2_Stream0_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f7xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f7xx_it.o(i.HardFault_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[69]">I2C4_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[68]">I2C4_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[66]">LPTIM1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[62]">LTDC_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[61]">LTDC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f7xx_it.o(i.MemManage_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f7xx_it.o(i.NMI_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f7xx_it.o(i.PendSV_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[65]">QUADSPI_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[59]">RNG_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[60]">SAI1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[64]">SAI2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3b]">SDMMC1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6a]">SPDIF_RX_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5d]">SPI4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5e]">SPI5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5f]">SPI6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f7xx_it.o(i.SVC_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[7e]">SuiteSparse_divcomplex</a> from suitesparse_config.o(i.SuiteSparse_divcomplex) referenced from suitesparse_config.o(.data)
 <LI><a href="#[7d]">SuiteSparse_hypot</a> from suitesparse_config.o(i.SuiteSparse_hypot) referenced from suitesparse_config.o(.data)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f7xx_it.o(i.SysTick_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6c]">SystemInit</a> from system_stm32f7xx.o(i.SystemInit) referenced from startup_stm32f746xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32f7xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5b]">UART7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5c]">UART8_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[71]">UART_DMAAbortOnError</a> from stm32f7xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f7xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[72]">UART_TxISR_16BIT</a> from stm32f7xx_hal_uart.o(i.UART_TxISR_16BIT) referenced from stm32f7xx_hal_uart.o(i.HAL_UART_Transmit_IT)
 <LI><a href="#[73]">UART_TxISR_8BIT</a> from stm32f7xx_hal_uart.o(i.UART_TxISR_8BIT) referenced from stm32f7xx_hal_uart.o(i.HAL_UART_Transmit_IT)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f7xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f7xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f746xx.o(.text)
 <LI><a href="#[75]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[74]">fputc</a> from fputc.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[7c]">free</a> from mallocr.o(i.__free$realloc) referenced from suitesparse_config.o(.data)
 <LI><a href="#[77]">free_linsys_solver_qdldl</a> from qdldl_interface.o(i.free_linsys_solver_qdldl) referenced from qdldl_interface.o(i.init_linsys_solver_qdldl)
 <LI><a href="#[6b]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[7a]">malloc</a> from mallocr.o(i.__malloc$realloc) referenced from suitesparse_config.o(.data)
 <LI><a href="#[7b]">realloc</a> from mallocr.o(i.realloc) referenced from suitesparse_config.o(.data)
 <LI><a href="#[76]">solve_linsys_qdldl</a> from qdldl_interface.o(i.solve_linsys_qdldl) referenced from qdldl_interface.o(i.init_linsys_solver_qdldl)
 <LI><a href="#[78]">update_linsys_solver_matrices_qdldl</a> from qdldl_interface.o(i.update_linsys_solver_matrices_qdldl) referenced from qdldl_interface.o(i.init_linsys_solver_qdldl)
 <LI><a href="#[79]">update_linsys_solver_rho_vec_qdldl</a> from qdldl_interface.o(i.update_linsys_solver_rho_vec_qdldl) referenced from qdldl_interface.o(i.init_linsys_solver_qdldl)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(.text)
</UL>
<P><STRONG><a name="[1a8]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[7f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[98]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1a9]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1aa]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1ab]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1ac]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1ad]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amd_l2
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_solve
</UL>

<P><STRONG><a name="[171]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[149]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_settings
</UL>

<P><STRONG><a name="[1ae]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1af]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1b1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1a5]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_string
</UL>

<P><STRONG><a name="[88]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = calloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_setup
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_linsys_solver_qdldl
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_calloc
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_rho_estimate
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuiteSparse_hypot
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_update_rho
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_rho_vec
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rho_vec
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuiteSparse_hypot
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amd_l2
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_linsys_solver_qdldl
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_update_rho
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_rho_vec
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_solution
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rho_vec
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_rho_estimate
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_linsys_solver_rho_vec_qdldl
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_data
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_l2f</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ffltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_l2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_mean
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amd_l_aat
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amd_l2
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amd_l_order
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_d2lz</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amd_l2
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_linsys_solver_qdldl
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_update_rho
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_rho_vec
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_solution
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rho_vec
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dual_infeasible
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_rho_estimate
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuiteSparse_hypot
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuiteSparse_divcomplex
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amd_l2
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDLDL_factor
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_linsys_solver_rho_vec_qdldl
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_scaling
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_data
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polish
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuiteSparse_divcomplex
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDLDL_factor
</UL>

<P><STRONG><a name="[140]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_update_rho
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_rho_vec
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rho_vec
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dual_infeasible
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_rho_estimate
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_scaling
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polish
</UL>

<P><STRONG><a name="[f1]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_update_rho
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_rho_vec
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rho_vec
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dual_infeasible
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_rho_estimate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuiteSparse_divcomplex
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDLDL_factor
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_scaling
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_linsys_solver_qdldl
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_update_rho
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_rho_vec
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_solution
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rho_vec
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_rho_estimate
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuiteSparse_hypot
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_linsys_solver_rho_vec_qdldl
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_scaling
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_data
</UL>

<P><STRONG><a name="[1b2]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1b3]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1b4]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1b5]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[92]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
</UL>

<P><STRONG><a name="[8c]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[8b]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[96]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[80]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1b7]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>__I$use$semihosting$fputc</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, iusesemip.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_IRQHandler &rArr; HAL_ADC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.DMA2_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main_1.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_string
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RNG_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[9e]"></a>HAL_ADCEx_InjectedConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_adc_ex.o(i.HAL_ADCEx_InjectedConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 414 bytes, Stack size 12 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
</UL>

<P><STRONG><a name="[99]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, main_1.o(i.HAL_ADC_ConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>HAL_ADC_ConvHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_ConvHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAHalfConvCplt
</UL>

<P><STRONG><a name="[9a]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAError
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>HAL_ADC_IRQHandler</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_LevelOutOfWindowCallback
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConvCpltCallback
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[a0]"></a>HAL_ADC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
</UL>

<P><STRONG><a name="[9f]"></a>HAL_ADC_LevelOutOfWindowCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_LevelOutOfWindowCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[176]"></a>HAL_ADC_Start</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ADC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[a9]"></a>HAL_ADC_Start_DMA</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[e8]"></a>HAL_DAC_ConfigChannel</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f7xx_hal_dac.o(i.HAL_DAC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DAC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
</UL>

<P><STRONG><a name="[ab]"></a>HAL_DAC_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f7xx_hal_dac.o(i.HAL_DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_DAC_Init &rArr; HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
</UL>

<P><STRONG><a name="[ac]"></a>HAL_DAC_MspInit</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_DAC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
</UL>

<P><STRONG><a name="[10f]"></a>HAL_DAC_SetValue</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32f7xx_hal_dac.o(i.HAL_DAC_SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DAC_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__setControlValue
</UL>

<P><STRONG><a name="[177]"></a>HAL_DAC_Start</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, stm32f7xx_hal_dac.o(i.HAL_DAC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_DAC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[d6]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>HAL_DMA_Init</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[aa]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[a4]"></a>HAL_GPIO_Init</STRONG> (Thumb, 484 bytes, Stack size 24 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[ad]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
</UL>

<P><STRONG><a name="[f6]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b1]"></a>HAL_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f7xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[b3]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f7xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b4]"></a>HAL_MspInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f7xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a8]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[a7]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[b2]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b8]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32f7xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b9]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1756 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ba]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[bd]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[bc]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[be]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[bb]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[bf]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1200 bytes, Stack size 24 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c0]"></a>HAL_RNG_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f7xx_hal_rng.o(i.HAL_RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RNG_Init &rArr; HAL_RNG_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RNG_Init
</UL>

<P><STRONG><a name="[c1]"></a>HAL_RNG_MspInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f7xx_hal_msp.o(i.HAL_RNG_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
</UL>

<P><STRONG><a name="[b5]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f7xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[d0]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d2]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ec]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[c2]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[c3]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f7xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[178]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[c5]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[cb]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 440 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[cd]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ce]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main_mpc.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d1]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1a4]"></a>HAL_UART_GetState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_string
</UL>

<P><STRONG><a name="[d4]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>HAL_UART_Init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[da]"></a>HAL_UART_MspInit</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1a6]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_string
</UL>

<P><STRONG><a name="[f9]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[f2]"></a>QDLDL_Lsolve</STRONG> (Thumb, 132 bytes, Stack size 36 bytes, qdldl.o(i.QDLDL_Lsolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = QDLDL_Lsolve
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDLDL_solve
</UL>

<P><STRONG><a name="[f3]"></a>QDLDL_Ltsolve</STRONG> (Thumb, 132 bytes, Stack size 36 bytes, qdldl.o(i.QDLDL_Ltsolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = QDLDL_Ltsolve
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDLDL_solve
</UL>

<P><STRONG><a name="[e3]"></a>QDLDL_etree</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, qdldl.o(i.QDLDL_etree))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = QDLDL_etree
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDL_factor
</UL>

<P><STRONG><a name="[e4]"></a>QDLDL_factor</STRONG> (Thumb, 1050 bytes, Stack size 152 bytes, qdldl.o(i.QDLDL_factor))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = QDLDL_factor
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_linsys_solver_rho_vec_qdldl
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_linsys_solver_matrices_qdldl
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDL_factor
</UL>

<P><STRONG><a name="[e0]"></a>QDLDL_solve</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, qdldl.o(i.QDLDL_solve))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = QDLDL_solve &rArr; QDLDL_Ltsolve
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDLDL_Ltsolve
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDLDL_Lsolve
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDLSolve
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>SuiteSparse_divcomplex</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, suitesparse_config.o(i.SuiteSparse_divcomplex))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SuiteSparse_divcomplex &rArr; __hardfp_fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> suitesparse_config.o(.data)
</UL>
<P><STRONG><a name="[124]"></a>SuiteSparse_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, suitesparse_config.o(i.SuiteSparse_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SuiteSparse_free
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amd_l_order
</UL>

<P><STRONG><a name="[7d]"></a>SuiteSparse_hypot</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, suitesparse_config.o(i.SuiteSparse_hypot))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SuiteSparse_hypot &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> suitesparse_config.o(.data)
</UL>
<P><STRONG><a name="[123]"></a>SuiteSparse_malloc</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, suitesparse_config.o(i.SuiteSparse_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SuiteSparse_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amd_l_order
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[f7]"></a>SystemClock_Config</STRONG> (Thumb, 202 bytes, Stack size 208 bytes, main_1.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[6c]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_stm32f7xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[c6]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[dc]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[dd]"></a>UART_CheckIdleState</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[db]"></a>UART_SetConfig</STRONG> (Thumb, 884 bytes, Stack size 32 bytes, stm32f7xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[f8]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32f7xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[fa]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ba]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1a7]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writemessage
</UL>

<P><STRONG><a name="[1bb]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1bc]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[fc]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1bd]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[166]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profiler_print
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2strF
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle
</UL>

<P><STRONG><a name="[1be]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1bf]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[fd]"></a>__controller_setup</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, default_functions.o(i.__controller_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = __controller_setup &rArr; controller_setup &rArr; controller &rArr; osqp_solve &rArr; polish &rArr; init_linsys_solver &rArr; init_linsys_solver_qdldl &rArr; permute_KKT &rArr; amd_l_order &rArr; amd_l1 &rArr; amd_l2 &rArr; amd_l_postorder &rArr; amd_l_post_tree
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_interrupt
</UL>

<P><STRONG><a name="[ff]"></a>__controls</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, default_functions.o(i.__controls))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __controls &rArr; controls &rArr; profiler_start &rArr; add_new_profiler_entry &rArr; find_profiler_entry &rArr; get_profiler &rArr; create_profiler &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controls
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_interrupt
</UL>

<P><STRONG><a name="[7c]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_KKT
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_spfree
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_done
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_linsys_solver_qdldl
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;permute_KKT
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iterative_refinement
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polish
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_cleanup
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> suitesparse_config.o(.data)
</UL>
<P><STRONG><a name="[101]"></a>__get_time</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, default_functions.o(i.__get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __get_time &rArr; get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profiler_start
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profiler_end
</UL>

<P><STRONG><a name="[f4]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuiteSparse_hypot
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuiteSparse_divcomplex
</UL>

<P><STRONG><a name="[f5]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuiteSparse_hypot
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amd_l2
</UL>

<P><STRONG><a name="[104]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_ew_sqrt
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_rho_estimate
</UL>

<P><STRONG><a name="[105]"></a>__hardware_setup</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, default_functions.o(i.__hardware_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = __hardware_setup &rArr; hardware_setup &rArr; low_lvl_main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_interrupt
</UL>

<P><STRONG><a name="[107]"></a>__idle</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, default_functions.o(i.__idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = __idle &rArr; idle &rArr; profiler_print &rArr; get_profiler &rArr; create_profiler &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_interrupt
</UL>

<P><STRONG><a name="[109]"></a>__loop</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, default_functions.o(i.__loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = __loop &rArr; loop &rArr; controller &rArr; osqp_solve &rArr; polish &rArr; init_linsys_solver &rArr; init_linsys_solver_qdldl &rArr; permute_KKT &rArr; amd_l_order &rArr; amd_l1 &rArr; amd_l2 &rArr; amd_l_postorder &rArr; amd_l_post_tree
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_interrupt
</UL>

<P><STRONG><a name="[7a]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray3
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_profiler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_new_profiler_entry
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_current_control
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_vector
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_matrix
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_setup
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_matrix
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_linsys_solver_qdldl
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_copy
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_KKT
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_malloc
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;permute_KKT
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDL_factor
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iterative_refinement
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polish
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_settings
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> suitesparse_config.o(.data)
</UL>
<P><STRONG><a name="[17a]"></a>__measureOutput</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main_1.o(i.__measureOutput))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measurements
</UL>

<P><STRONG><a name="[10c]"></a>__measurements</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, default_functions.o(i.__measurements))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __measurements &rArr; measurements &rArr; profiler_start &rArr; add_new_profiler_entry &rArr; find_profiler_entry &rArr; get_profiler &rArr; create_profiler &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measurements
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_interrupt
</UL>

<P><STRONG><a name="[1c0]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1c1]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1c2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[10e]"></a>__setControlValue</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, main_1.o(i.__setControlValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __setControlValue &rArr; HAL_DAC_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controls
</UL>

<P><STRONG><a name="[103]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[110]"></a>__write_string</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, default_functions.o(i.__write_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __write_string &rArr; write_string &rArr; HAL_UART_Transmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_string
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profiler_print
</UL>

<P><STRONG><a name="[116]"></a>adapt_rho</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, auxil.o(i.adapt_rho))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = adapt_rho &rArr; compute_rho_estimate &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_update_rho
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_rho_estimate
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_solve
</UL>

<P><STRONG><a name="[119]"></a>add_new_profiler_entry</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, profiler.o(i.add_new_profiler_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = add_new_profiler_entry &rArr; find_profiler_entry &rArr; get_profiler &rArr; create_profiler &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_profiler_entry
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_last
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profiler_start
</UL>

<P><STRONG><a name="[11c]"></a>amd_l1</STRONG> (Thumb, 882 bytes, Stack size 208 bytes, amd_1.o(i.amd_l1))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = amd_l1 &rArr; amd_l2 &rArr; amd_l_postorder &rArr; amd_l_post_tree
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amd_l2
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amd_l_order
</UL>

<P><STRONG><a name="[11d]"></a>amd_l2</STRONG> (Thumb, 6238 bytes, Stack size 520 bytes, amd_2.o(i.amd_l2))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = amd_l2 &rArr; amd_l_postorder &rArr; amd_l_post_tree
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amd_l_postorder
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amd_l1
</UL>

<P><STRONG><a name="[120]"></a>amd_l_aat</STRONG> (Thumb, 850 bytes, Stack size 136 bytes, amd_aat.o(i.amd_l_aat))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = amd_l_aat &rArr; __aeabi_l2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amd_l_order
</UL>

<P><STRONG><a name="[121]"></a>amd_l_order</STRONG> (Thumb, 1164 bytes, Stack size 160 bytes, amd_order.o(i.amd_l_order))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = amd_l_order &rArr; amd_l1 &rArr; amd_l2 &rArr; amd_l_postorder &rArr; amd_l_post_tree
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amd_l_valid
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amd_l_preprocess
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuiteSparse_malloc
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuiteSparse_free
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amd_l_aat
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amd_l1
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;permute_KKT
</UL>

<P><STRONG><a name="[126]"></a>amd_l_post_tree</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, amd_post_tree.o(i.amd_l_post_tree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = amd_l_post_tree
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amd_l_postorder
</UL>

<P><STRONG><a name="[11f]"></a>amd_l_postorder</STRONG> (Thumb, 584 bytes, Stack size 136 bytes, amd_postorder.o(i.amd_l_postorder))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = amd_l_postorder &rArr; amd_l_post_tree
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amd_l_post_tree
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amd_l2
</UL>

<P><STRONG><a name="[125]"></a>amd_l_preprocess</STRONG> (Thumb, 488 bytes, Stack size 64 bytes, amd_preprocess.o(i.amd_l_preprocess))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = amd_l_preprocess
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amd_l_order
</UL>

<P><STRONG><a name="[122]"></a>amd_l_valid</STRONG> (Thumb, 300 bytes, Stack size 88 bytes, amd_valid.o(i.amd_l_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = amd_l_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amd_l_order
</UL>

<P><STRONG><a name="[19f]"></a>c_strcpy</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, util.o(i.c_strcpy))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_status
</UL>

<P><STRONG><a name="[127]"></a>check_termination</STRONG> (Thumb, 714 bytes, Stack size 88 bytes, auxil.o(i.check_termination))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = check_termination &rArr; is_dual_infeasible &rArr; mat_vec
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_ew_prod
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_status
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_primal_infeasible
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dual_infeasible
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_pri_tol
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_dua_tol
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_solve
</UL>

<P><STRONG><a name="[12e]"></a>cold_start</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, auxil.o(i.cold_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = cold_start &rArr; vec_set_scalar
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_set_scalar
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_solve
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_setup
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_solution
</UL>

<P><STRONG><a name="[130]"></a>compute_dua_res</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, auxil.o(i.compute_dua_res))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = compute_dua_res &rArr; mat_vec
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_scaled_norm_inf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_norm_inf
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_add_scaled
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prea_vec_copy
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_vec
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_tpose_vec
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_info
</UL>

<P><STRONG><a name="[12b]"></a>compute_dua_tol</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, auxil.o(i.compute_dua_tol))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = compute_dua_tol &rArr; vec_scaled_norm_inf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_scaled_norm_inf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_norm_inf
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_termination
</UL>

<P><STRONG><a name="[137]"></a>compute_inf_norm_cols_KKT</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, scaling.o(i.compute_inf_norm_cols_KKT))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = compute_inf_norm_cols_KKT &rArr; mat_inf_norm_cols_sym_triu
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_ew_max_vec
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_inf_norm_rows
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_inf_norm_cols_sym_triu
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_inf_norm_cols
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_data
</UL>

<P><STRONG><a name="[13c]"></a>compute_obj_val</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, auxil.o(i.compute_obj_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = compute_obj_val &rArr; quad_form
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_prod
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quad_form
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_solve
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_info
</UL>

<P><STRONG><a name="[13f]"></a>compute_pri_res</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, auxil.o(i.compute_pri_res))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = compute_pri_res &rArr; mat_vec
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_scaled_norm_inf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_norm_inf
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_add_scaled
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_vec
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_info
</UL>

<P><STRONG><a name="[129]"></a>compute_pri_tol</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, auxil.o(i.compute_pri_tol))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = compute_pri_tol &rArr; vec_scaled_norm_inf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_scaled_norm_inf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_norm_inf
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_termination
</UL>

<P><STRONG><a name="[117]"></a>compute_rho_estimate</STRONG> (Thumb, 452 bytes, Stack size 88 bytes, auxil.o(i.compute_rho_estimate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = compute_rho_estimate &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_norm_inf
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_solve
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adapt_rho
</UL>

<P><STRONG><a name="[141]"></a>controller</STRONG> (Thumb, 10490 bytes, Stack size 48 bytes, main_mpc.o(i.controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = controller &rArr; osqp_solve &rArr; polish &rArr; init_linsys_solver &rArr; init_linsys_solver_qdldl &rArr; permute_KKT &rArr; amd_l_order &rArr; amd_l1 &rArr; amd_l2 &rArr; amd_l_postorder &rArr; amd_l_post_tree
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumaa
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;productab
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray3
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_control_increment
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_update_lin_cost
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_update_bounds
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_solve
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_setup
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_set_default_settings
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_matrix
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_setup
</UL>

<P><STRONG><a name="[fe]"></a>controller_setup</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main_mpc.o(i.controller_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = controller_setup &rArr; controller &rArr; osqp_solve &rArr; polish &rArr; init_linsys_solver &rArr; init_linsys_solver_qdldl &rArr; permute_KKT &rArr; amd_l_order &rArr; amd_l1 &rArr; amd_l2 &rArr; amd_l_postorder &rArr; amd_l_post_tree
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profiler_start
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profiler_end
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_current_control
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_archive_data
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__controller_setup
</UL>

<P><STRONG><a name="[100]"></a>controls</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main_mpc.o(i.controls))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = controls &rArr; profiler_start &rArr; add_new_profiler_entry &rArr; find_profiler_entry &rArr; get_profiler &rArr; create_profiler &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profiler_start
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profiler_end
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;last_control
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__setControlValue
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__controls
</UL>

<P><STRONG><a name="[153]"></a>copy_csc_mat</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, cs.o(i.copy_csc_mat))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = copy_csc_mat &rArr; csc_spalloc &rArr; csc_calloc &rArr; calloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prea_int_vec_copy
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_spalloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prea_vec_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_setup
</UL>

<P><STRONG><a name="[156]"></a>copy_settings</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, util.o(i.copy_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = copy_settings &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_setup
</UL>

<P><STRONG><a name="[158]"></a>create_profiler</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, profiler.o(i.create_profiler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = create_profiler &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_profiler
</UL>

<P><STRONG><a name="[160]"></a>csc_cumsum</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, cs.o(i.csc_cumsum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = csc_cumsum
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;triplet_to_csr
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;triplet_to_csc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_symperm
</UL>

<P><STRONG><a name="[15b]"></a>csc_done</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, cs.o(i.csc_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = csc_done &rArr; csc_spfree &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_spfree
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;triplet_to_csr
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;triplet_to_csc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_symperm
</UL>

<P><STRONG><a name="[142]"></a>csc_matrix</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, cs.o(i.csc_matrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = csc_matrix &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller
</UL>

<P><STRONG><a name="[15e]"></a>csc_pinv</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, cs.o(i.csc_pinv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = csc_pinv &rArr; csc_malloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;permute_KKT
</UL>

<P><STRONG><a name="[154]"></a>csc_spalloc</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, cs.o(i.csc_spalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = csc_spalloc &rArr; csc_calloc &rArr; calloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_spfree
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_malloc
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_KKT
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;triplet_to_csr
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;triplet_to_csc
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_to_triu
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_symperm
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_csc_mat
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_Ared
</UL>

<P><STRONG><a name="[15c]"></a>csc_spfree</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cs.o(i.csc_spfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = csc_spfree &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_linsys_solver_qdldl
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_KKT
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_to_triu
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_spalloc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_done
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_linsys_solver_qdldl
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;permute_KKT
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polish
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_cleanup
</UL>

<P><STRONG><a name="[15f]"></a>csc_symperm</STRONG> (Thumb, 754 bytes, Stack size 152 bytes, cs.o(i.csc_symperm))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = csc_symperm &rArr; csc_spalloc &rArr; csc_calloc &rArr; calloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_spalloc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_done
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_cumsum
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;permute_KKT
</UL>

<P><STRONG><a name="[161]"></a>csc_to_triu</STRONG> (Thumb, 298 bytes, Stack size 96 bytes, cs.o(i.csc_to_triu))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = csc_to_triu &rArr; triplet_to_csc &rArr; csc_spalloc &rArr; csc_calloc &rArr; calloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;triplet_to_csc
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_spfree
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_spalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_setup
</UL>

<P><STRONG><a name="[145]"></a>darray</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, allocation_nr.o(i.darray))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = darray &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writemessage
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller
</UL>

<P><STRONG><a name="[146]"></a>darray3</STRONG> (Thumb, 340 bytes, Stack size 56 bytes, allocation_nr.o(i.darray3))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = darray3 &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writemessage
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller
</UL>

<P><STRONG><a name="[11b]"></a>find_last</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, profiler.o(i.find_last))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = find_last &rArr; get_profiler &rArr; create_profiler &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_profiler
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_new_profiler_entry
</UL>

<P><STRONG><a name="[11a]"></a>find_profiler_entry</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, profiler.o(i.find_profiler_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = find_profiler_entry &rArr; get_profiler &rArr; create_profiler &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_profiler
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profiler_end
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_new_profiler_entry
</UL>

<P><STRONG><a name="[165]"></a>float2strF</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, profiler.o(i.float2strF))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = float2strF &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profiler_print
</UL>

<P><STRONG><a name="[169]"></a>form_KKT</STRONG> (Thumb, 1184 bytes, Stack size 128 bytes, kkt.o(i.form_KKT))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = form_KKT &rArr; triplet_to_csr &rArr; csc_spalloc &rArr; csc_calloc &rArr; calloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;triplet_to_csr
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;triplet_to_csc
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_spfree
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_spalloc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_linsys_solver_qdldl
</UL>

<P><STRONG><a name="[74]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[77]"></a>free_linsys_solver_qdldl</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, qdldl_interface.o(i.free_linsys_solver_qdldl))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = free_linsys_solver_qdldl &rArr; csc_spfree &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_spfree
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_linsys_solver_qdldl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qdldl_interface.o(i.init_linsys_solver_qdldl)
</UL>
<P><STRONG><a name="[164]"></a>get_profiler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, profiler.o(i.get_profiler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get_profiler &rArr; create_profiler &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_profiler
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profiler_print
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_profiler_entry
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_last
</UL>

<P><STRONG><a name="[102]"></a>get_time</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main_mpc.o(i.get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_time
</UL>

<P><STRONG><a name="[106]"></a>hardware_setup</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main_mpc.o(i.hardware_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = hardware_setup &rArr; low_lvl_main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profiler_start
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profiler_end
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardware_setup
</UL>

<P><STRONG><a name="[108]"></a>idle</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, main_mpc.o(i.idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = idle &rArr; profiler_print &rArr; get_profiler &rArr; create_profiler &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profiler_start
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profiler_print
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profiler_end
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_string
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__idle
</UL>

<P><STRONG><a name="[14f]"></a>init_archive_data</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, mpctools.o(i.init_archive_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = init_archive_data &rArr; create_matrix &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_vector
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_matrix
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_setup
</UL>

<P><STRONG><a name="[150]"></a>init_current_control</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, mpctools.o(i.init_current_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = init_current_control &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_setup
</UL>

<P><STRONG><a name="[16e]"></a>init_linsys_solver</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, lin_sys.o(i.init_linsys_solver))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = init_linsys_solver &rArr; init_linsys_solver_qdldl &rArr; permute_KKT &rArr; amd_l_order &rArr; amd_l1 &rArr; amd_l2 &rArr; amd_l_postorder &rArr; amd_l_post_tree
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_linsys_solver_qdldl
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_setup
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polish
</UL>

<P><STRONG><a name="[16f]"></a>init_linsys_solver_qdldl</STRONG> (Thumb, 760 bytes, Stack size 104 bytes, qdldl_interface.o(i.init_linsys_solver_qdldl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = init_linsys_solver_qdldl &rArr; permute_KKT &rArr; amd_l_order &rArr; amd_l1 &rArr; amd_l2 &rArr; amd_l_postorder &rArr; amd_l_post_tree
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_KKT
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_spfree
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_linsys_solver_qdldl
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;permute_KKT
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDL_factor
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_linsys_solver
</UL>

<P><STRONG><a name="[168]"></a>int_vec_set_scalar</STRONG> (Thumb, 44 bytes, Stack size 28 bytes, lin_alg.o(i.int_vec_set_scalar))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = int_vec_set_scalar
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_Ared
</UL>

<P><STRONG><a name="[12c]"></a>is_dual_infeasible</STRONG> (Thumb, 518 bytes, Stack size 64 bytes, auxil.o(i.is_dual_infeasible))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = is_dual_infeasible &rArr; mat_vec
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_scaled_norm_inf
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_prod
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_norm_inf
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_ew_prod
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_vec
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_tpose_vec
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_termination
</UL>

<P><STRONG><a name="[12a]"></a>is_primal_infeasible</STRONG> (Thumb, 368 bytes, Stack size 56 bytes, auxil.o(i.is_primal_infeasible))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = is_primal_infeasible &rArr; mat_tpose_vec
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_norm_inf
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_ew_prod
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_tpose_vec
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_termination
</UL>

<P><STRONG><a name="[152]"></a>last_control</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mpctools.o(i.last_control))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controls
</UL>

<P><STRONG><a name="[173]"></a>limit_scaling</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, scaling.o(i.limit_scaling))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = limit_scaling &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_data
</UL>

<P><STRONG><a name="[183]"></a>load_linsys_solver</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lin_sys.o(i.load_linsys_solver))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_setup
</UL>

<P><STRONG><a name="[10a]"></a>loop</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, main_mpc.o(i.loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = loop &rArr; controller &rArr; osqp_solve &rArr; polish &rArr; init_linsys_solver &rArr; init_linsys_solver_qdldl &rArr; permute_KKT &rArr; amd_l_order &rArr; amd_l1 &rArr; amd_l2 &rArr; amd_l_postorder &rArr; amd_l_post_tree
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profiler_start
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profiler_end
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_current_controls_to_archive_data
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__loop
</UL>

<P><STRONG><a name="[16c]"></a>low_lvl_main</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, main_1.o(i.low_lvl_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = low_lvl_main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Start
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RNG_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_setup
</UL>

<P><STRONG><a name="[6b]"></a>main</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = main &rArr; main_interrupt &rArr; __loop &rArr; loop &rArr; controller &rArr; osqp_solve &rArr; polish &rArr; init_linsys_solver &rArr; init_linsys_solver_qdldl &rArr; permute_KKT &rArr; amd_l_order &rArr; amd_l1 &rArr; amd_l2 &rArr; amd_l_postorder &rArr; amd_l_post_tree
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[179]"></a>main_interrupt</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, main.o(i.main_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = main_interrupt &rArr; __loop &rArr; loop &rArr; controller &rArr; osqp_solve &rArr; polish &rArr; init_linsys_solver &rArr; init_linsys_solver_qdldl &rArr; permute_KKT &rArr; amd_l_order &rArr; amd_l1 &rArr; amd_l2 &rArr; amd_l_postorder &rArr; amd_l_post_tree
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__measurements
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__loop
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__idle
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardware_setup
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__controls
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__controller_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>mat_inf_norm_cols</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, lin_alg.o(i.mat_inf_norm_cols))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mat_inf_norm_cols
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_inf_norm_cols_KKT
</UL>

<P><STRONG><a name="[138]"></a>mat_inf_norm_cols_sym_triu</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, lin_alg.o(i.mat_inf_norm_cols_sym_triu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mat_inf_norm_cols_sym_triu
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_inf_norm_cols_KKT
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_data
</UL>

<P><STRONG><a name="[13b]"></a>mat_inf_norm_rows</STRONG> (Thumb, 210 bytes, Stack size 28 bytes, lin_alg.o(i.mat_inf_norm_rows))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mat_inf_norm_rows
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_inf_norm_cols_KKT
</UL>

<P><STRONG><a name="[199]"></a>mat_mult_scalar</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, lin_alg.o(i.mat_mult_scalar))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mat_mult_scalar
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_data
</UL>

<P><STRONG><a name="[197]"></a>mat_postmult_diag</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lin_alg.o(i.mat_postmult_diag))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mat_postmult_diag
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_data
</UL>

<P><STRONG><a name="[196]"></a>mat_premult_diag</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lin_alg.o(i.mat_premult_diag))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mat_premult_diag
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_data
</UL>

<P><STRONG><a name="[133]"></a>mat_tpose_vec</STRONG> (Thumb, 740 bytes, Stack size 36 bytes, lin_alg.o(i.mat_tpose_vec))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mat_tpose_vec
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_primal_infeasible
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dual_infeasible
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_dua_res
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iterative_refinement
</UL>

<P><STRONG><a name="[132]"></a>mat_vec</STRONG> (Thumb, 394 bytes, Stack size 36 bytes, lin_alg.o(i.mat_vec))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mat_vec
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dual_infeasible
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_pri_res
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_dua_res
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iterative_refinement
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polish
</UL>

<P><STRONG><a name="[10d]"></a>measurements</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main_mpc.o(i.measurements))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = measurements &rArr; profiler_start &rArr; add_new_profiler_entry &rArr; find_profiler_entry &rArr; get_profiler &rArr; create_profiler &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profiler_start
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profiler_end
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_output
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__measureOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__measurements
</UL>

<P><STRONG><a name="[192]"></a>new_control</STRONG> (Thumb, 162 bytes, Stack size 12 bytes, mpctools.o(i.new_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = new_control
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_current_controls_to_archive_data
</UL>

<P><STRONG><a name="[193]"></a>new_control_increment</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, mpctools.o(i.new_control_increment))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = new_control_increment
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_current_controls_to_archive_data
</UL>

<P><STRONG><a name="[17b]"></a>new_output</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, mpctools.o(i.new_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = new_output
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measurements
</UL>

<P><STRONG><a name="[17c]"></a>osqp_cleanup</STRONG> (Thumb, 586 bytes, Stack size 16 bytes, osqp.o(i.osqp_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = osqp_cleanup &rArr; csc_spfree &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unload_linsys_solver
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_spfree
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_setup
</UL>

<P><STRONG><a name="[143]"></a>osqp_set_default_settings</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, osqp.o(i.osqp_set_default_settings))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller
</UL>

<P><STRONG><a name="[144]"></a>osqp_setup</STRONG> (Thumb, 954 bytes, Stack size 32 bytes, osqp.o(i.osqp_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = osqp_setup &rArr; init_linsys_solver &rArr; init_linsys_solver_qdldl &rArr; permute_KKT &rArr; amd_l_order &rArr; amd_l1 &rArr; amd_l2 &rArr; amd_l_postorder &rArr; amd_l_post_tree
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_linsys_solver
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_linsys_solver
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_copy
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_to_triu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_csc_mat
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_settings
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_data
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_status
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rho_vec
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cold_start
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_data
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_settings
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_cleanup
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller
</UL>

<P><STRONG><a name="[14c]"></a>osqp_solve</STRONG> (Thumb, 578 bytes, Stack size 64 bytes, osqp.o(i.osqp_solve))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = osqp_solve &rArr; polish &rArr; init_linsys_solver &rArr; init_linsys_solver_qdldl &rArr; permute_KKT &rArr; amd_l_order &rArr; amd_l1 &rArr; amd_l2 &rArr; amd_l_postorder &rArr; amd_l_post_tree
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_z
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_y
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_xz_tilde
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_x
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_status
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_info
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_vectors
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_solution
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_rho_estimate
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_obj_val
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cold_start
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_termination
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adapt_rho
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polish
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller
</UL>

<P><STRONG><a name="[14b]"></a>osqp_update_bounds</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, osqp.o(i.osqp_update_bounds))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = osqp_update_bounds &rArr; update_rho_vec &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_ew_prod
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prea_vec_copy
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_rho_vec
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_info
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller
</UL>

<P><STRONG><a name="[14a]"></a>osqp_update_lin_cost</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, osqp.o(i.osqp_update_lin_cost))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = osqp_update_lin_cost &rArr; vec_ew_prod
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_mult_scalar
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_ew_prod
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prea_vec_copy
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_info
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller
</UL>

<P><STRONG><a name="[118]"></a>osqp_update_rho</STRONG> (Thumb, 450 bytes, Stack size 64 bytes, osqp.o(i.osqp_update_rho))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osqp_update_rho &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adapt_rho
</UL>

<P><STRONG><a name="[df]"></a>permute_x</STRONG> (Thumb, 58 bytes, Stack size 28 bytes, qdldl_interface.o(i.permute_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = permute_x
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDLSolve
</UL>

<P><STRONG><a name="[e1]"></a>permutet_x</STRONG> (Thumb, 56 bytes, Stack size 28 bytes, qdldl_interface.o(i.permutet_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = permutet_x
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDLSolve
</UL>

<P><STRONG><a name="[18a]"></a>polish</STRONG> (Thumb, 600 bytes, Stack size 64 bytes, polish.o(i.polish))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = polish &rArr; init_linsys_solver &rArr; init_linsys_solver_qdldl &rArr; permute_KKT &rArr; amd_l_order &rArr; amd_l1 &rArr; amd_l2 &rArr; amd_l_postorder &rArr; amd_l_post_tree
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_linsys_solver
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_copy
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_spfree
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prea_vec_copy
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_vec
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_info
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;project_normalcone
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iterative_refinement
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ypol_from_yred
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_rhs_red
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_Ared
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_solve
</UL>

<P><STRONG><a name="[155]"></a>prea_int_vec_copy</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lin_alg.o(i.prea_int_vec_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prea_int_vec_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_csc_mat
</UL>

<P><STRONG><a name="[131]"></a>prea_vec_copy</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lin_alg.o(i.prea_vec_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prea_vec_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_update_lin_cost
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_update_bounds
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_csc_mat
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_solution
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_dua_res
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iterative_refinement
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polish
</UL>

<P><STRONG><a name="[148]"></a>productab</STRONG> (Thumb, 108 bytes, Stack size 28 bytes, matrix_cal.o(i.productab))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = productab
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller
</UL>

<P><STRONG><a name="[151]"></a>profiler_end</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, profiler.o(i.profiler_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = profiler_end &rArr; find_profiler_entry &rArr; get_profiler &rArr; create_profiler &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_profiler_entry
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measurements
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_setup
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controls
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_setup
</UL>

<P><STRONG><a name="[191]"></a>profiler_exists</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, profiler.o(i.profiler_exists))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profiler_print
</UL>

<P><STRONG><a name="[16d]"></a>profiler_print</STRONG> (Thumb, 274 bytes, Stack size 1048 bytes, profiler.o(i.profiler_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = profiler_print &rArr; get_profiler &rArr; create_profiler &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profiler_exists
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_profiler
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2strF
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_string
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle
</UL>

<P><STRONG><a name="[14e]"></a>profiler_start</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, profiler.o(i.profiler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = profiler_start &rArr; add_new_profiler_entry &rArr; find_profiler_entry &rArr; get_profiler &rArr; create_profiler &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_new_profiler_entry
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measurements
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_setup
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controls
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_setup
</UL>

<P><STRONG><a name="[1a2]"></a>project</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, proj.o(i.project))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = project
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_z
</UL>

<P><STRONG><a name="[190]"></a>project_normalcone</STRONG> (Thumb, 152 bytes, Stack size 28 bytes, proj.o(i.project_normalcone))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = project_normalcone
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polish
</UL>

<P><STRONG><a name="[174]"></a>push_current_controls_to_archive_data</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, mpctools.o(i.push_current_controls_to_archive_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = push_current_controls_to_archive_data &rArr; new_control_increment
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_control_increment
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_control
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[13d]"></a>quad_form</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, lin_alg.o(i.quad_form))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = quad_form
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_obj_val
</UL>

<P><STRONG><a name="[7b]"></a>realloc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mallocr.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = realloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_KKT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> suitesparse_config.o(.data)
</UL>
<P><STRONG><a name="[18c]"></a>reset_info</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, auxil.o(i.reset_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = reset_info &rArr; update_status
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_status
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_update_lin_cost
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_update_bounds
</UL>

<P><STRONG><a name="[181]"></a>scale_data</STRONG> (Thumb, 620 bytes, Stack size 80 bytes, scaling.o(i.scale_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = scale_data &rArr; compute_inf_norm_cols_KKT &rArr; mat_inf_norm_cols_sym_triu
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_mean
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_ew_sqrt
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_ew_recipr
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_premult_diag
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_postmult_diag
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_mult_scalar
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_inf_norm_cols_sym_triu
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_set_scalar
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_norm_inf
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_mult_scalar
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_ew_prod
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_scaling
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_inf_norm_cols_KKT
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_setup
</UL>

<P><STRONG><a name="[14d]"></a>set_current_control_increment</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mpctools.o(i.set_current_control_increment))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller
</UL>

<P><STRONG><a name="[182]"></a>set_rho_vec</STRONG> (Thumb, 500 bytes, Stack size 40 bytes, auxil.o(i.set_rho_vec))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = set_rho_vec &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_setup
</UL>

<P><STRONG><a name="[76]"></a>solve_linsys_qdldl</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, qdldl_interface.o(i.solve_linsys_qdldl))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = solve_linsys_qdldl &rArr; LDLSolve &rArr; QDLDL_solve &rArr; QDLDL_Ltsolve
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDLSolve
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qdldl_interface.o(i.init_linsys_solver_qdldl)
</UL>
<P><STRONG><a name="[18b]"></a>store_solution</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, auxil.o(i.store_solution))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = store_solution &rArr; unscale_solution &rArr; vec_ew_prod
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_set_scalar
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_norm_inf
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_mult_scalar
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unscale_solution
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prea_vec_copy
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cold_start
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_solution
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_solve
</UL>

<P><STRONG><a name="[147]"></a>sumaa</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, matrix_cal.o(i.sumaa))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sumaa
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller
</UL>

<P><STRONG><a name="[184]"></a>swap_vectors</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, auxil.o(i.swap_vectors))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_solve
</UL>

<P><STRONG><a name="[d3]"></a>timer_loop</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.timer_loop))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[162]"></a>triplet_to_csc</STRONG> (Thumb, 378 bytes, Stack size 120 bytes, cs.o(i.triplet_to_csc))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = triplet_to_csc &rArr; csc_spalloc &rArr; csc_calloc &rArr; calloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_spalloc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_done
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_cumsum
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_KKT
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_to_triu
</UL>

<P><STRONG><a name="[16a]"></a>triplet_to_csr</STRONG> (Thumb, 378 bytes, Stack size 120 bytes, cs.o(i.triplet_to_csr))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = triplet_to_csr &rArr; csc_spalloc &rArr; csc_calloc &rArr; calloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_spalloc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_done
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_cumsum
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_KKT
</UL>

<P><STRONG><a name="[17d]"></a>unload_linsys_solver</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lin_sys.o(i.unload_linsys_solver))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_cleanup
</UL>

<P><STRONG><a name="[19b]"></a>unscale_solution</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, scaling.o(i.unscale_solution))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = unscale_solution &rArr; vec_ew_prod
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_mult_scalar
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_ew_prod
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_solution
</UL>

<P><STRONG><a name="[19d]"></a>update_KKT_A</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, kkt.o(i.update_KKT_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = update_KKT_A
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_linsys_solver_matrices_qdldl
</UL>

<P><STRONG><a name="[19c]"></a>update_KKT_P</STRONG> (Thumb, 152 bytes, Stack size 36 bytes, kkt.o(i.update_KKT_P))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = update_KKT_P
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_linsys_solver_matrices_qdldl
</UL>

<P><STRONG><a name="[19e]"></a>update_KKT_param2</STRONG> (Thumb, 68 bytes, Stack size 28 bytes, kkt.o(i.update_KKT_param2))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = update_KKT_param2
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_linsys_solver_rho_vec_qdldl
</UL>

<P><STRONG><a name="[189]"></a>update_info</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, auxil.o(i.update_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = update_info &rArr; compute_dua_res &rArr; mat_vec
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_pri_res
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_obj_val
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_dua_res
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_solve
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polish
</UL>

<P><STRONG><a name="[78]"></a>update_linsys_solver_matrices_qdldl</STRONG> (Thumb, 142 bytes, Stack size 72 bytes, qdldl_interface.o(i.update_linsys_solver_matrices_qdldl))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = update_linsys_solver_matrices_qdldl &rArr; QDLDL_factor
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_KKT_P
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_KKT_A
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDLDL_factor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qdldl_interface.o(i.init_linsys_solver_qdldl)
</UL>
<P><STRONG><a name="[79]"></a>update_linsys_solver_rho_vec_qdldl</STRONG> (Thumb, 196 bytes, Stack size 96 bytes, qdldl_interface.o(i.update_linsys_solver_rho_vec_qdldl))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = update_linsys_solver_rho_vec_qdldl &rArr; QDLDL_factor
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_KKT_param2
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDLDL_factor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qdldl_interface.o(i.init_linsys_solver_qdldl)
</UL>
<P><STRONG><a name="[18d]"></a>update_rho_vec</STRONG> (Thumb, 522 bytes, Stack size 56 bytes, auxil.o(i.update_rho_vec))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = update_rho_vec &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_update_bounds
</UL>

<P><STRONG><a name="[128]"></a>update_status</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, auxil.o(i.update_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_status
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_solve
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_setup
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_info
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_termination
</UL>

<P><STRONG><a name="[186]"></a>update_x</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, auxil.o(i.update_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_x
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_solve
</UL>

<P><STRONG><a name="[185]"></a>update_xz_tilde</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, auxil.o(i.update_xz_tilde))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = update_xz_tilde &rArr; update_z_tilde
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_z_tilde
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_rhs
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_solve
</UL>

<P><STRONG><a name="[188]"></a>update_y</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, auxil.o(i.update_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_y
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_solve
</UL>

<P><STRONG><a name="[187]"></a>update_z</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, auxil.o(i.update_z))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = update_z &rArr; project
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;project
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_solve
</UL>

<P><STRONG><a name="[17e]"></a>validate_data</STRONG> (Thumb, 204 bytes, Stack size 20 bytes, auxil.o(i.validate_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = validate_data
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_setup
</UL>

<P><STRONG><a name="[1a3]"></a>validate_linsys_solver</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, auxil.o(i.validate_linsys_solver))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = validate_linsys_solver
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_settings
</UL>

<P><STRONG><a name="[17f]"></a>validate_settings</STRONG> (Thumb, 488 bytes, Stack size 8 bytes, auxil.o(i.validate_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate_settings &rArr; validate_linsys_solver
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_linsys_solver
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_setup
</UL>

<P><STRONG><a name="[134]"></a>vec_add_scaled</STRONG> (Thumb, 68 bytes, Stack size 28 bytes, lin_alg.o(i.vec_add_scaled))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = vec_add_scaled
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_pri_res
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_dua_res
</UL>

<P><STRONG><a name="[180]"></a>vec_copy</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, lin_alg.o(i.vec_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vec_copy &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_setup
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polish
</UL>

<P><STRONG><a name="[13a]"></a>vec_ew_max_vec</STRONG> (Thumb, 68 bytes, Stack size 28 bytes, lin_alg.o(i.vec_ew_max_vec))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = vec_ew_max_vec
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_inf_norm_cols_KKT
</UL>

<P><STRONG><a name="[12d]"></a>vec_ew_prod</STRONG> (Thumb, 68 bytes, Stack size 28 bytes, lin_alg.o(i.vec_ew_prod))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = vec_ew_prod
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_update_lin_cost
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_update_bounds
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unscale_solution
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_primal_infeasible
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dual_infeasible
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_termination
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_data
</UL>

<P><STRONG><a name="[195]"></a>vec_ew_recipr</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lin_alg.o(i.vec_ew_recipr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vec_ew_recipr
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_data
</UL>

<P><STRONG><a name="[194]"></a>vec_ew_sqrt</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lin_alg.o(i.vec_ew_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vec_ew_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_data
</UL>

<P><STRONG><a name="[198]"></a>vec_mean</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, lin_alg.o(i.vec_mean))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vec_mean &rArr; __aeabi_l2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_data
</UL>

<P><STRONG><a name="[18e]"></a>vec_mult_scalar</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, lin_alg.o(i.vec_mult_scalar))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vec_mult_scalar
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osqp_update_lin_cost
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unscale_solution
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_solution
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_data
</UL>

<P><STRONG><a name="[136]"></a>vec_norm_inf</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, lin_alg.o(i.vec_norm_inf))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vec_norm_inf
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_solution
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_primal_infeasible
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dual_infeasible
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_rho_estimate
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_pri_tol
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_pri_res
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_dua_tol
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_dua_res
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_data
</UL>

<P><STRONG><a name="[13e]"></a>vec_prod</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lin_alg.o(i.vec_prod))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vec_prod
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dual_infeasible
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_obj_val
</UL>

<P><STRONG><a name="[135]"></a>vec_scaled_norm_inf</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, lin_alg.o(i.vec_scaled_norm_inf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vec_scaled_norm_inf
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dual_infeasible
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_pri_tol
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_pri_res
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_dua_tol
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_dua_res
</UL>

<P><STRONG><a name="[12f]"></a>vec_set_scalar</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, lin_alg.o(i.vec_set_scalar))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vec_set_scalar
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_solution
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cold_start
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ypol_from_yred
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_data
</UL>

<P><STRONG><a name="[111]"></a>write_string</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, main_1.o(i.write_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_string &rArr; HAL_UART_Transmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetState
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_string
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle
</UL>

<P><STRONG><a name="[163]"></a>writemessage</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, allocation_nr.o(i.writemessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = writemessage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray3
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[157]"></a>create_matrix</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, mpctools.o(i.create_matrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = create_matrix &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_archive_data
</UL>

<P><STRONG><a name="[159]"></a>create_vector</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mpctools.o(i.create_vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = create_vector &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_archive_data
</UL>

<P><STRONG><a name="[e5]"></a>MX_ADC3_Init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, main_1.o(i.MX_ADC3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_ADC3_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[e7]"></a>MX_DAC_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, main_1.o(i.MX_DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_DAC_Init &rArr; HAL_DAC_Init &rArr; HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_ConfigChannel
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[e9]"></a>MX_DMA_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main_1.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[175]"></a>MX_GPIO_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main_1.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MX_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[ea]"></a>MX_RNG_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main_1.o(i.MX_RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_RNG_Init &rArr; HAL_RNG_Init &rArr; HAL_RNG_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[eb]"></a>MX_TIM2_Init</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, main_1.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[ed]"></a>MX_TIM5_Init</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, main_1.o(i.MX_TIM5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_TIM5_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[ee]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main_1.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_lvl_main
</UL>

<P><STRONG><a name="[6e]"></a>ADC_DMAConvCplt</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, stm32f7xx_hal_adc.o(i.ADC_DMAConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DMAConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[70]"></a>ADC_DMAError</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32f7xx_hal_adc.o(i.ADC_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[6f]"></a>ADC_DMAHalfConvCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f7xx_hal_adc.o(i.ADC_DMAHalfConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DMAHalfConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[a2]"></a>ADC_Init</STRONG> (Thumb, 354 bytes, Stack size 0 bytes, stm32f7xx_hal_adc.o(i.ADC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[b6]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[b7]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[c8]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[c7]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[c9]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[71]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[d5]"></a>UART_EndRxTransfer</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[72]"></a>UART_TxISR_16BIT</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.UART_TxISR_16BIT))
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_uart.o(i.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[73]"></a>UART_TxISR_8BIT</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.UART_TxISR_8BIT))
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_uart.o(i.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[af]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[ae]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[b0]"></a>DMA_SetConfig</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f7xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[1a0]"></a>compute_rhs</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, auxil.o(i.compute_rhs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = compute_rhs
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_xz_tilde
</UL>

<P><STRONG><a name="[19a]"></a>has_solution</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, auxil.o(i.has_solution))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = has_solution
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_solution
</UL>

<P><STRONG><a name="[1a1]"></a>update_z_tilde</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, auxil.o(i.update_z_tilde))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_z_tilde
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_xz_tilde
</UL>

<P><STRONG><a name="[15a]"></a>csc_calloc</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, cs.o(i.csc_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = csc_calloc &rArr; calloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;triplet_to_csr
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;triplet_to_csc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_symperm
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_spalloc
</UL>

<P><STRONG><a name="[15d]"></a>csc_malloc</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, cs.o(i.csc_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = csc_malloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_spalloc
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_pinv
</UL>

<P><STRONG><a name="[167]"></a>form_Ared</STRONG> (Thumb, 1058 bytes, Stack size 72 bytes, polish.o(i.form_Ared))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = form_Ared &rArr; csc_spalloc &rArr; csc_calloc &rArr; calloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_vec_set_scalar
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_spalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polish
</UL>

<P><STRONG><a name="[18f]"></a>form_rhs_red</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, polish.o(i.form_rhs_red))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = form_rhs_red
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polish
</UL>

<P><STRONG><a name="[16b]"></a>get_ypol_from_yred</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, polish.o(i.get_ypol_from_yred))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = get_ypol_from_yred &rArr; vec_set_scalar
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_set_scalar
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polish
</UL>

<P><STRONG><a name="[172]"></a>iterative_refinement</STRONG> (Thumb, 308 bytes, Stack size 88 bytes, polish.o(i.iterative_refinement))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = iterative_refinement &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prea_vec_copy
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_vec
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_tpose_vec
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polish
</UL>

<P><STRONG><a name="[de]"></a>LDLSolve</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, qdldl_interface.o(i.LDLSolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LDLSolve &rArr; QDLDL_solve &rArr; QDLDL_Ltsolve
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDLDL_solve
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;permutet_x
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;permute_x
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solve_linsys_qdldl
</UL>

<P><STRONG><a name="[e2]"></a>LDL_factor</STRONG> (Thumb, 218 bytes, Stack size 96 bytes, qdldl_interface.o(i.LDL_factor))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LDL_factor &rArr; QDLDL_factor
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDLDL_factor
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDLDL_etree
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_linsys_solver_qdldl
</UL>

<P><STRONG><a name="[170]"></a>permute_KKT</STRONG> (Thumb, 362 bytes, Stack size 96 bytes, qdldl_interface.o(i.permute_KKT))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = permute_KKT &rArr; amd_l_order &rArr; amd_l1 &rArr; amd_l2 &rArr; amd_l_postorder &rArr; amd_l_post_tree
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_symperm
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_spfree
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_pinv
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amd_l_order
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_linsys_solver_qdldl
</UL>

<P><STRONG><a name="[11e]"></a>clear_flag</STRONG> (Thumb, 112 bytes, Stack size 36 bytes, amd_2.o(i.clear_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = clear_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amd_l2
</UL>

<P><STRONG><a name="[112]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[fb]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[114]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[113]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[75]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[10b]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
